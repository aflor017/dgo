#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_2015_12_16_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_2015_12_16 : public prob_grad {
private:
    int G;
    int G_hier;
    int Q;
    int T;
    int N;
    int S;
    int P;
    int H;
    int Hprior;
    int D;
    int constant_item;
    int separate_t;
    double delta_tbar_prior_mean;
    double delta_tbar_prior_sd;
    double innov_sd_delta_scale;
    double innov_sd_theta_scale;
    vector<int> n_vec;
    vector<int> s_vec;
    vector<vector<vector<int> > > NNl2;
    vector<vector<vector<int> > > SSl2;
    vector<vector<vector<int> > > MMM;
    matrix_d XX;
    vector<matrix_d> WT;
    vector<matrix_d> ZZ;
    vector<matrix_d> ZZ_prior;
    matrix_d l2_only;
public:
    model_2015_12_16(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_2015_12_16(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_2015_12_16_namespace::model_2015_12_16";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G_hier", "int", context__.to_vec());
        G_hier = int(0);
        vals_i__ = context__.vals_i("G_hier");
        pos__ = 0;
        G_hier = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
        Q = int(0);
        vals_i__ = context__.vals_i("Q");
        pos__ = 0;
        Q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "T", "int", context__.to_vec());
        T = int(0);
        vals_i__ = context__.vals_i("T");
        pos__ = 0;
        T = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "P", "int", context__.to_vec());
        P = int(0);
        vals_i__ = context__.vals_i("P");
        pos__ = 0;
        P = vals_i__[pos__++];
        context__.validate_dims("data initialization", "H", "int", context__.to_vec());
        H = int(0);
        vals_i__ = context__.vals_i("H");
        pos__ = 0;
        H = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Hprior", "int", context__.to_vec());
        Hprior = int(0);
        vals_i__ = context__.vals_i("Hprior");
        pos__ = 0;
        Hprior = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "constant_item", "int", context__.to_vec());
        constant_item = int(0);
        vals_i__ = context__.vals_i("constant_item");
        pos__ = 0;
        constant_item = vals_i__[pos__++];
        context__.validate_dims("data initialization", "separate_t", "int", context__.to_vec());
        separate_t = int(0);
        vals_i__ = context__.vals_i("separate_t");
        pos__ = 0;
        separate_t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_mean", "double", context__.to_vec());
        delta_tbar_prior_mean = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_mean");
        pos__ = 0;
        delta_tbar_prior_mean = vals_r__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_sd", "double", context__.to_vec());
        delta_tbar_prior_sd = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_sd");
        pos__ = 0;
        delta_tbar_prior_sd = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_delta_scale", "double", context__.to_vec());
        innov_sd_delta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_delta_scale");
        pos__ = 0;
        innov_sd_delta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_theta_scale", "double", context__.to_vec());
        innov_sd_theta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_theta_scale");
        pos__ = 0;
        innov_sd_theta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "n_vec", "int", context__.to_vec(N));
        validate_non_negative_index("n_vec", "N", N);
        n_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("n_vec");
        pos__ = 0;
        size_t n_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < n_vec_limit_0__; ++i_0__) {
            n_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "s_vec", "int", context__.to_vec(N));
        validate_non_negative_index("s_vec", "N", N);
        s_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("s_vec");
        pos__ = 0;
        size_t s_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < s_vec_limit_0__; ++i_0__) {
            s_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "NNl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("NNl2", "T", T);
        validate_non_negative_index("NNl2", "Q", Q);
        validate_non_negative_index("NNl2", "G_hier", G_hier);
        NNl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("NNl2");
        pos__ = 0;
        size_t NNl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < NNl2_limit_2__; ++i_2__) {
            size_t NNl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < NNl2_limit_1__; ++i_1__) {
                size_t NNl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < NNl2_limit_0__; ++i_0__) {
                    NNl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "SSl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("SSl2", "T", T);
        validate_non_negative_index("SSl2", "Q", Q);
        validate_non_negative_index("SSl2", "G_hier", G_hier);
        SSl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("SSl2");
        pos__ = 0;
        size_t SSl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < SSl2_limit_2__; ++i_2__) {
            size_t SSl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < SSl2_limit_1__; ++i_1__) {
                size_t SSl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < SSl2_limit_0__; ++i_0__) {
                    SSl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "MMM", "int", context__.to_vec(T,Q,G));
        validate_non_negative_index("MMM", "T", T);
        validate_non_negative_index("MMM", "Q", Q);
        validate_non_negative_index("MMM", "G", G);
        MMM = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G,int(0))));
        vals_i__ = context__.vals_i("MMM");
        pos__ = 0;
        size_t MMM_limit_2__ = G;
        for (size_t i_2__ = 0; i_2__ < MMM_limit_2__; ++i_2__) {
            size_t MMM_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < MMM_limit_1__; ++i_1__) {
                size_t MMM_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < MMM_limit_0__; ++i_0__) {
                    MMM[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "XX", "matrix_d", context__.to_vec(G,P));
        validate_non_negative_index("XX", "G", G);
        validate_non_negative_index("XX", "P", P);
        XX = matrix_d(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(P));
        vals_r__ = context__.vals_r("XX");
        pos__ = 0;
        size_t XX_m_mat_lim__ = G;
        size_t XX_n_mat_lim__ = P;
        for (size_t n_mat__ = 0; n_mat__ < XX_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < XX_m_mat_lim__; ++m_mat__) {
                XX(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "WT", "matrix_d", context__.to_vec(T,G_hier,G));
        validate_non_negative_index("WT", "T", T);
        validate_non_negative_index("WT", "G_hier", G_hier);
        validate_non_negative_index("WT", "G", G);
        WT = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(G_hier),static_cast<Eigen::VectorXd::Index>(G)));
        vals_r__ = context__.vals_r("WT");
        pos__ = 0;
        size_t WT_m_mat_lim__ = G_hier;
        size_t WT_n_mat_lim__ = G;
        for (size_t n_mat__ = 0; n_mat__ < WT_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < WT_m_mat_lim__; ++m_mat__) {
                size_t WT_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < WT_limit_0__; ++i_0__) {
                    WT[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ", "matrix_d", context__.to_vec(T,P,H));
        validate_non_negative_index("ZZ", "T", T);
        validate_non_negative_index("ZZ", "P", P);
        validate_non_negative_index("ZZ", "H", H);
        ZZ = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(H)));
        vals_r__ = context__.vals_r("ZZ");
        pos__ = 0;
        size_t ZZ_m_mat_lim__ = P;
        size_t ZZ_n_mat_lim__ = H;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_m_mat_lim__; ++m_mat__) {
                size_t ZZ_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_limit_0__; ++i_0__) {
                    ZZ[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ_prior", "matrix_d", context__.to_vec(T,P,Hprior));
        validate_non_negative_index("ZZ_prior", "T", T);
        validate_non_negative_index("ZZ_prior", "P", P);
        validate_non_negative_index("ZZ_prior", "Hprior", Hprior);
        ZZ_prior = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(Hprior)));
        vals_r__ = context__.vals_r("ZZ_prior");
        pos__ = 0;
        size_t ZZ_prior_m_mat_lim__ = P;
        size_t ZZ_prior_n_mat_lim__ = Hprior;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_prior_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_prior_m_mat_lim__; ++m_mat__) {
                size_t ZZ_prior_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_prior_limit_0__; ++i_0__) {
                    ZZ_prior[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "l2_only", "matrix_d", context__.to_vec(T,Q));
        validate_non_negative_index("l2_only", "T", T);
        validate_non_negative_index("l2_only", "Q", Q);
        l2_only = matrix_d(static_cast<Eigen::VectorXd::Index>(T),static_cast<Eigen::VectorXd::Index>(Q));
        vals_r__ = context__.vals_r("l2_only");
        pos__ = 0;
        size_t l2_only_m_mat_lim__ = T;
        size_t l2_only_n_mat_lim__ = Q;
        for (size_t n_mat__ = 0; n_mat__ < l2_only_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < l2_only_m_mat_lim__; ++m_mat__) {
                l2_only(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"G_hier",G_hier,1);
        check_greater_or_equal(function__,"Q",Q,1);
        check_greater_or_equal(function__,"T",T,1);
        check_greater_or_equal(function__,"N",N,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"P",P,1);
        check_greater_or_equal(function__,"H",H,1);
        check_greater_or_equal(function__,"Hprior",Hprior,1);
        check_greater_or_equal(function__,"D",D,1);
        check_greater_or_equal(function__,"constant_item",constant_item,0);
        check_less_or_equal(function__,"constant_item",constant_item,1);
        check_greater_or_equal(function__,"separate_t",separate_t,0);
        check_less_or_equal(function__,"separate_t",separate_t,1);
        check_greater_or_equal(function__,"delta_tbar_prior_sd",delta_tbar_prior_sd,0);
        check_greater_or_equal(function__,"innov_sd_delta_scale",innov_sd_delta_scale,0);
        check_greater_or_equal(function__,"innov_sd_theta_scale",innov_sd_theta_scale,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"MMM[k0__][k1__][k2__]",MMM[k0__][k1__][k2__],0);
                }
            }
        }
        check_greater_or_equal(function__,"XX",XX,0);
        check_less_or_equal(function__,"XX",XX,1);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            check_greater_or_equal(function__,"WT[k0__]",WT[k0__],0);
            check_less_or_equal(function__,"WT[k0__]",WT[k0__],1);
        }
        check_greater_or_equal(function__,"l2_only",l2_only,0);
        check_less_or_equal(function__,"l2_only",l2_only,1);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += Q * D;
        num_params_r__ += Q;
        num_params_r__ += T;
        num_params_r__ += P * T;
        num_params_r__ += T;
        num_params_r__ += H * T;
        num_params_r__ += Hprior;
        num_params_r__ += T;
        num_params_r__ += G * T;
        num_params_r__ += T;
        num_params_r__ += T;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~model_2015_12_16() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("diff_raw")))
            throw std::runtime_error("variable diff_raw missing");
        vals_r__ = context__.vals_r("diff_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "diff_raw", "vector_d", context__.to_vec(D,Q));
        // generate_declaration diff_raw
        std::vector<vector_d> diff_raw(D,vector_d(static_cast<Eigen::VectorXd::Index>(Q)));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            for (int i0__ = 0U; i0__ < D; ++i0__)
                diff_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < D; ++i0__)
            try {
            writer__.vector_unconstrain(diff_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable diff_raw: ") + e.what());
        }

        if (!(context__.contains_r("disc_raw")))
            throw std::runtime_error("variable disc_raw missing");
        vals_r__ = context__.vals_r("disc_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "disc_raw", "vector_d", context__.to_vec(Q));
        // generate_declaration disc_raw
        vector_d disc_raw(static_cast<Eigen::VectorXd::Index>(Q));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            disc_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,disc_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable disc_raw: ") + e.what());
        }

        if (!(context__.contains_r("xi")))
            throw std::runtime_error("variable xi missing");
        vals_r__ = context__.vals_r("xi");
        pos__ = 0U;
        context__.validate_dims("initialization", "xi", "vector_d", context__.to_vec(T));
        // generate_declaration xi
        vector_d xi(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            xi(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(xi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xi: ") + e.what());
        }

        if (!(context__.contains_r("gamma_raw")))
            throw std::runtime_error("variable gamma_raw missing");
        vals_r__ = context__.vals_r("gamma_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma_raw", "vector_d", context__.to_vec(T,P));
        // generate_declaration gamma_raw
        std::vector<vector_d> gamma_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(P)));
        for (int j1__ = 0U; j1__ < P; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                gamma_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(gamma_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma_raw: ") + e.what());
        }

        if (!(context__.contains_r("delta_gamma")))
            throw std::runtime_error("variable delta_gamma missing");
        vals_r__ = context__.vals_r("delta_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_gamma", "vector_d", context__.to_vec(T));
        // generate_declaration delta_gamma
        vector_d delta_gamma(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_gamma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_gamma: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo")))
            throw std::runtime_error("variable nu_geo missing");
        vals_r__ = context__.vals_r("nu_geo");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo", "vector_d", context__.to_vec(T,H));
        // generate_declaration nu_geo
        std::vector<vector_d> nu_geo(T,vector_d(static_cast<Eigen::VectorXd::Index>(H)));
        for (int j1__ = 0U; j1__ < H; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                nu_geo[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(nu_geo[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo_prior")))
            throw std::runtime_error("variable nu_geo_prior missing");
        vals_r__ = context__.vals_r("nu_geo_prior");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo_prior", "vector_d", context__.to_vec(Hprior));
        // generate_declaration nu_geo_prior
        vector_d nu_geo_prior(static_cast<Eigen::VectorXd::Index>(Hprior));
        for (int j1__ = 0U; j1__ < Hprior; ++j1__)
            nu_geo_prior(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(nu_geo_prior);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo_prior: ") + e.what());
        }

        if (!(context__.contains_r("delta_tbar")))
            throw std::runtime_error("variable delta_tbar missing");
        vals_r__ = context__.vals_r("delta_tbar");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_tbar", "vector_d", context__.to_vec(T));
        // generate_declaration delta_tbar
        vector_d delta_tbar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_tbar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_tbar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_tbar: ") + e.what());
        }

        if (!(context__.contains_r("theta_bar_raw")))
            throw std::runtime_error("variable theta_bar_raw missing");
        vals_r__ = context__.vals_r("theta_bar_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_bar_raw", "vector_d", context__.to_vec(T,G));
        // generate_declaration theta_bar_raw
        std::vector<vector_d> theta_bar_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(G)));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                theta_bar_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(theta_bar_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_bar_raw: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta_bar")))
            throw std::runtime_error("variable sd_theta_bar missing");
        vals_r__ = context__.vals_r("sd_theta_bar");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta_bar", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta_bar
        vector_d sd_theta_bar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta_bar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta_bar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta_bar: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta")))
            throw std::runtime_error("variable sd_theta missing");
        vals_r__ = context__.vals_r("sd_theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta
        vector_d sd_theta(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta: ") + e.what());
        }

        if (!(context__.contains_r("sd_gamma")))
            throw std::runtime_error("variable sd_gamma missing");
        vals_r__ = context__.vals_r("sd_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_gamma", "double", context__.to_vec());
        // generate_declaration sd_gamma
        double sd_gamma(0);
        sd_gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_gamma: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_delta")))
            throw std::runtime_error("variable sd_innov_delta missing");
        vals_r__ = context__.vals_r("sd_innov_delta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_delta", "double", context__.to_vec());
        // generate_declaration sd_innov_delta
        double sd_innov_delta(0);
        sd_innov_delta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_delta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_delta: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_logsd")))
            throw std::runtime_error("variable sd_innov_logsd missing");
        vals_r__ = context__.vals_r("sd_innov_logsd");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_logsd", "double", context__.to_vec());
        // generate_declaration sd_innov_logsd
        double sd_innov_logsd(0);
        sd_innov_logsd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_logsd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_logsd: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_gamma")))
            throw std::runtime_error("variable sd_innov_gamma missing");
        vals_r__ = context__.vals_r("sd_innov_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_gamma", "double", context__.to_vec());
        // generate_declaration sd_innov_gamma
        double sd_innov_gamma(0);
        sd_innov_gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_gamma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > diff_raw;
        size_t dim_diff_raw_0__ = D;
        diff_raw.reserve(dim_diff_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_diff_raw_0__; ++k_0__) {
            if (jacobian__)
                diff_raw.push_back(in__.vector_constrain(Q,lp__));
            else
                diff_raw.push_back(in__.vector_constrain(Q));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  disc_raw;
        (void) disc_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            disc_raw = in__.vector_lb_constrain(0,Q,lp__);
        else
            disc_raw = in__.vector_lb_constrain(0,Q);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  xi;
        (void) xi;  // dummy to suppress unused var warning
        if (jacobian__)
            xi = in__.vector_constrain(T,lp__);
        else
            xi = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        gamma_raw.reserve(dim_gamma_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            if (jacobian__)
                gamma_raw.push_back(in__.vector_constrain(P,lp__));
            else
                gamma_raw.push_back(in__.vector_constrain(P));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_gamma;
        (void) delta_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_gamma = in__.vector_constrain(T,lp__);
        else
            delta_gamma = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > nu_geo;
        size_t dim_nu_geo_0__ = T;
        nu_geo.reserve(dim_nu_geo_0__);
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            if (jacobian__)
                nu_geo.push_back(in__.vector_constrain(H,lp__));
            else
                nu_geo.push_back(in__.vector_constrain(H));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  nu_geo_prior;
        (void) nu_geo_prior;  // dummy to suppress unused var warning
        if (jacobian__)
            nu_geo_prior = in__.vector_constrain(Hprior,lp__);
        else
            nu_geo_prior = in__.vector_constrain(Hprior);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_tbar;
        (void) delta_tbar;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_tbar = in__.vector_constrain(T,lp__);
        else
            delta_tbar = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        theta_bar_raw.reserve(dim_theta_bar_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            if (jacobian__)
                theta_bar_raw.push_back(in__.vector_constrain(G,lp__));
            else
                theta_bar_raw.push_back(in__.vector_constrain(G));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta_bar;
        (void) sd_theta_bar;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta_bar = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta_bar = in__.vector_lb_constrain(0,T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta;
        (void) sd_theta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta = in__.vector_lb_constrain(0,T);

        T__ sd_gamma;
        (void) sd_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_gamma = in__.scalar_lb_constrain(0,lp__);
        else
            sd_gamma = in__.scalar_lb_constrain(0);

        T__ sd_innov_delta;
        (void) sd_innov_delta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_delta = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_delta = in__.scalar_lb_constrain(0);

        T__ sd_innov_logsd;
        (void) sd_innov_logsd;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_logsd = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_logsd = in__.scalar_lb_constrain(0);

        T__ sd_innov_gamma;
        (void) sd_innov_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_gamma = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_gamma = in__.scalar_lb_constrain(0);


        // transformed parameters
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, DUMMY_VAR__);
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > diff(D, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(diff, DUMMY_VAR__);
        stan::math::fill(diff,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > kappa(D, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(kappa, DUMMY_VAR__);
        stan::math::fill(kappa,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  disc(static_cast<Eigen::VectorXd::Index>(Q));
        (void) disc;  // dummy to suppress unused var warning
        stan::math::initialize(disc, DUMMY_VAR__);
        stan::math::fill(disc,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) sd_item;  // dummy to suppress unused var warning
        stan::math::initialize(sd_item, DUMMY_VAR__);
        stan::math::fill(sd_item,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  var_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) var_item;  // dummy to suppress unused var warning
        stan::math::initialize(var_item, DUMMY_VAR__);
        stan::math::fill(var_item,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  var_theta(static_cast<Eigen::VectorXd::Index>(T));
        (void) var_theta;  // dummy to suppress unused var warning
        stan::math::initialize(var_theta, DUMMY_VAR__);
        stan::math::fill(var_theta,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > var_theta_bar_l2(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(var_theta_bar_l2, DUMMY_VAR__);
        stan::math::fill(var_theta_bar_l2,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, DUMMY_VAR__);
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, DUMMY_VAR__);
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > z(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > z_l2(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(z_l2, DUMMY_VAR__);
        stan::math::fill(z_l2,DUMMY_VAR__);
        vector<vector<vector<T__> > > prob(T, (vector<vector<T__> >(Q, (vector<T__>(G)))));
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > prob_l2(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(prob_l2, DUMMY_VAR__);
        stan::math::fill(prob_l2,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_l2(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(theta_l2, DUMMY_VAR__);
        stan::math::fill(theta_l2,DUMMY_VAR__);


        try {
            current_statement_begin__ = 68;
            stan::math::assign(disc, multiply(disc_raw,pow(exp(sum(log(disc_raw))),-(inv(Q)))));
            current_statement_begin__ = 69;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 70;
                stan::math::assign(get_base1_lhs(sd_item,q,"sd_item",1), inv(get_base1(disc,q,"disc",1)));
            }
            current_statement_begin__ = 72;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 74;
                stan::math::assign(get_base1_lhs(diff,d,"diff",1), subtract(get_base1(diff_raw,d,"diff_raw",1),mean(get_base1(diff_raw,1,"diff_raw",1))));
                current_statement_begin__ = 75;
                stan::math::assign(get_base1_lhs(kappa,d,"kappa",1), elt_divide(get_base1(diff,d,"diff",1),disc));
            }
            current_statement_begin__ = 77;
            stan::math::assign(var_item, elt_multiply(sd_item,sd_item));
            current_statement_begin__ = 78;
            stan::math::assign(var_theta, elt_multiply(sd_theta,sd_theta));
            current_statement_begin__ = 79;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 80;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 81;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 82;
                    stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    current_statement_begin__ = 83;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 86;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 87;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 95;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 96;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    } else {

                        current_statement_begin__ = 100;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), add(multiply(get_base1(gamma,(t - 1),"gamma",1),get_base1(delta_gamma,t,"delta_gamma",1)),multiply(get_base1(ZZ,t,"ZZ",1),get_base1(nu_geo,t,"nu_geo",1))));
                        current_statement_begin__ = 101;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 103;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 107;
                stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                current_statement_begin__ = 109;
                stan::math::assign(get_base1_lhs(theta_l2,t,"theta_l2",1), multiply(get_base1(WT,t,"WT",1),get_base1(theta_bar,t,"theta_bar",1)));
                current_statement_begin__ = 110;
                for (int n = 1; n <= G_hier; ++n) {
                    {
                        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  WTdiag(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(G));
                        (void) WTdiag;  // dummy to suppress unused var warning
                        stan::math::initialize(WTdiag, DUMMY_VAR__);
                        stan::math::fill(WTdiag,DUMMY_VAR__);


                        current_statement_begin__ = 112;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 113;
                            for (int h = 1; h <= G; ++h) {

                                current_statement_begin__ = 114;
                                if (as_bool(logical_eq(g,h))) {

                                    current_statement_begin__ = 115;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), get_base1(get_base1(WT,t,"WT",1),n,g,"WT",2));
                                }
                                current_statement_begin__ = 117;
                                if (as_bool(logical_neq(g,h))) {

                                    current_statement_begin__ = 118;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), 0);
                                }
                            }
                        }
                        current_statement_begin__ = 123;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2), multiply(multiply(transpose(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))),WTdiag),subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))));
                    }
                }
                current_statement_begin__ = 126;
                for (int q = 1; q <= Q; ++q) {
                    {
                        T__ sd_tq;
                        (void) sd_tq;  // dummy to suppress unused var warning
                        stan::math::initialize(sd_tq, DUMMY_VAR__);
                        stan::math::fill(sd_tq,DUMMY_VAR__);
                        vector<T__> sd_l2_tq(G_hier);
                        stan::math::initialize(sd_l2_tq, DUMMY_VAR__);
                        stan::math::fill(sd_l2_tq,DUMMY_VAR__);


                        current_statement_begin__ = 129;
                        stan::math::assign(sd_tq, sqrt((get_base1(var_theta,t,"var_theta",1) + get_base1(var_item,q,"var_item",1))));
                        current_statement_begin__ = 130;
                        for (int n = 1; n <= G_hier; ++n) {

                            current_statement_begin__ = 131;
                            stan::math::assign(get_base1_lhs(sd_l2_tq,n,"sd_l2_tq",1), sqrt((square(sd_tq) + get_base1(get_base1(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2))));
                        }
                        current_statement_begin__ = 134;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 135;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 136;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 137;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 139;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 142;
                        if (as_bool(logical_eq(constant_item,1))) {

                            current_statement_begin__ = 143;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 144;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 145;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 147;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 150;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 151;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < D; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                if (stan::math::is_uninitialized(diff[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: diff" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < D; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                if (stan::math::is_uninitialized(kappa[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: kappa" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(disc(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: disc" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(sd_item(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sd_item" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(var_item(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: var_item" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            if (stan::math::is_uninitialized(var_theta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: var_theta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G_hier; ++i1__) {
                if (stan::math::is_uninitialized(var_theta_bar_l2[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: var_theta_bar_l2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(mu_theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(mu_gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(z[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G_hier; ++i2__) {
                    if (stan::math::is_uninitialized(z_l2[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z_l2" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(prob[i0__][i1__][i2__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prob" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G_hier; ++i2__) {
                    if (stan::math::is_uninitialized(prob_l2[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prob_l2" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G_hier; ++i1__) {
                if (stan::math::is_uninitialized(theta_l2[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_l2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"disc",disc,0);
        check_greater_or_equal(function__,"sd_item",sd_item,0);
        check_greater_or_equal(function__,"var_item",var_item,0);
        check_greater_or_equal(function__,"var_theta",var_theta,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // model body
        try {
            {
                vector<T__> prob_vec(N);
                stan::math::initialize(prob_vec, DUMMY_VAR__);
                stan::math::fill(prob_vec,DUMMY_VAR__);
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning
                stan::math::fill(pos, std::numeric_limits<int>::min());


                current_statement_begin__ = 160;
                stan::math::assign(pos, 0);
                current_statement_begin__ = 162;
                if (as_bool(logical_eq(constant_item,1))) {

                    current_statement_begin__ = 163;
                    lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,1,"diff_raw",1), 0, 1));
                }
                current_statement_begin__ = 165;
                lp_accum__.add(lognormal_log<propto__>(disc_raw, 0, 1));
                current_statement_begin__ = 166;
                lp_accum__.add(cauchy_log<propto__>(sd_gamma, 0, 2.5));
                current_statement_begin__ = 167;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_delta, 0, innov_sd_delta_scale));
                current_statement_begin__ = 168;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_gamma, 0, 2.5));
                current_statement_begin__ = 169;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_logsd, 0, innov_sd_theta_scale));
                current_statement_begin__ = 170;
                for (int t = 1; t <= T; ++t) {

                    current_statement_begin__ = 171;
                    lp_accum__.add(normal_log<propto__>(get_base1(gamma_raw,t,"gamma_raw",1), 0, 1));
                    current_statement_begin__ = 172;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta_bar_raw,t,"theta_bar_raw",1), 0, 1));
                    current_statement_begin__ = 174;
                    if (as_bool(logical_eq(t,1))) {

                        current_statement_begin__ = 175;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 176;
                            lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,t,"diff_raw",1), 0, 1));
                        }
                        current_statement_begin__ = 179;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), 0, 2.5));
                        current_statement_begin__ = 180;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta,t,"sd_theta",1), 0, 2.5));
                        current_statement_begin__ = 181;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), 0, 10));
                        current_statement_begin__ = 182;
                        lp_accum__.add(normal_log<propto__>(nu_geo_prior, 0, 10));
                        current_statement_begin__ = 183;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), 0.5, 0.5));
                        current_statement_begin__ = 184;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), delta_tbar_prior_mean, delta_tbar_prior_sd));
                        current_statement_begin__ = 185;
                        lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                    }
                    current_statement_begin__ = 187;
                    if (as_bool(logical_gt(t,1))) {

                        current_statement_begin__ = 190;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 191;
                            lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,t,"diff_raw",1), get_base1(diff_raw,(t - 1),"diff_raw",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 194;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), get_base1(delta_gamma,(t - 1),"delta_gamma",1), sd_innov_delta));
                        current_statement_begin__ = 195;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), get_base1(nu_geo,(t - 1),"nu_geo",1), sd_innov_delta));
                        current_statement_begin__ = 196;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), get_base1(delta_tbar,(t - 1),"delta_tbar",1), sd_innov_delta));
                        current_statement_begin__ = 197;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), log(get_base1(sd_theta_bar,(t - 1),"sd_theta_bar",1)), sd_innov_logsd));
                        current_statement_begin__ = 198;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta,t,"sd_theta",1), log(get_base1(sd_theta,(t - 1),"sd_theta",1)), sd_innov_logsd));
                        current_statement_begin__ = 199;
                        if (as_bool((primitive_value(logical_eq(separate_t,0)) && primitive_value(logical_gt(t,2))))) {

                            current_statement_begin__ = 200;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), get_base1(xi,(t - 1),"xi",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 202;
                        if (as_bool((primitive_value(logical_eq(separate_t,1)) || primitive_value(logical_eq(t,2))))) {

                            current_statement_begin__ = 203;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                        }
                    }
                    current_statement_begin__ = 206;
                    for (int q = 1; q <= Q; ++q) {

                        current_statement_begin__ = 207;
                        if (as_bool(logical_eq(get_base1(l2_only,t,q,"l2_only",1),1))) {

                            current_statement_begin__ = 209;
                            lp_accum__.add(binomial_log<propto__>(get_base1(get_base1(SSl2,t,"SSl2",1),q,"SSl2",2), get_base1(get_base1(NNl2,t,"NNl2",1),q,"NNl2",2), get_base1(get_base1(prob_l2,t,"prob_l2",1),q,"prob_l2",2)));
                        }
                        current_statement_begin__ = 211;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 212;
                            if (as_bool(logical_eq(get_base1(get_base1(get_base1(MMM,t,"MMM",1),q,"MMM",2),g,"MMM",3),0))) {

                                current_statement_begin__ = 213;
                                stan::math::assign(pos, (pos + 1));
                                current_statement_begin__ = 214;
                                stan::math::assign(get_base1_lhs(prob_vec,pos,"prob_vec",1), get_base1(get_base1(get_base1(prob,t,"prob",1),q,"prob",2),g,"prob",3));
                            }
                        }
                    }
                }
                current_statement_begin__ = 220;
                lp_accum__.add(binomial_log<propto__>(s_vec, n_vec, prob_vec));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("diff_raw");
        names__.push_back("disc_raw");
        names__.push_back("xi");
        names__.push_back("gamma_raw");
        names__.push_back("delta_gamma");
        names__.push_back("nu_geo");
        names__.push_back("nu_geo_prior");
        names__.push_back("delta_tbar");
        names__.push_back("theta_bar_raw");
        names__.push_back("sd_theta_bar");
        names__.push_back("sd_theta");
        names__.push_back("sd_gamma");
        names__.push_back("sd_innov_delta");
        names__.push_back("sd_innov_logsd");
        names__.push_back("sd_innov_gamma");
        names__.push_back("theta_bar");
        names__.push_back("diff");
        names__.push_back("kappa");
        names__.push_back("disc");
        names__.push_back("sd_item");
        names__.push_back("var_item");
        names__.push_back("var_theta");
        names__.push_back("var_theta_bar_l2");
        names__.push_back("gamma");
        names__.push_back("mu_theta_bar");
        names__.push_back("mu_gamma");
        names__.push_back("z");
        names__.push_back("z_l2");
        names__.push_back("prob");
        names__.push_back("prob_l2");
        names__.push_back("theta_l2");
        names__.push_back("sd_total");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Hprior);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_2015_12_16_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<vector_d> diff_raw;
        size_t dim_diff_raw_0__ = D;
        for (size_t k_0__ = 0; k_0__ < dim_diff_raw_0__; ++k_0__) {
            diff_raw.push_back(in__.vector_constrain(Q));
        }
        vector_d disc_raw = in__.vector_lb_constrain(0,Q);
        vector_d xi = in__.vector_constrain(T);
        vector<vector_d> gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            gamma_raw.push_back(in__.vector_constrain(P));
        }
        vector_d delta_gamma = in__.vector_constrain(T);
        vector<vector_d> nu_geo;
        size_t dim_nu_geo_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            nu_geo.push_back(in__.vector_constrain(H));
        }
        vector_d nu_geo_prior = in__.vector_constrain(Hprior);
        vector_d delta_tbar = in__.vector_constrain(T);
        vector<vector_d> theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            theta_bar_raw.push_back(in__.vector_constrain(G));
        }
        vector_d sd_theta_bar = in__.vector_lb_constrain(0,T);
        vector_d sd_theta = in__.vector_lb_constrain(0,T);
        double sd_gamma = in__.scalar_lb_constrain(0);
        double sd_innov_delta = in__.scalar_lb_constrain(0);
        double sd_innov_logsd = in__.scalar_lb_constrain(0);
        double sd_innov_gamma = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(diff_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(disc_raw[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(xi[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_gamma[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < H; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(nu_geo[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Hprior; ++k_0__) {
            vars__.push_back(nu_geo_prior[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_tbar[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta_bar[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta[k_0__]);
        }
        vars__.push_back(sd_gamma);
        vars__.push_back(sd_innov_delta);
        vars__.push_back(sd_innov_logsd);
        vars__.push_back(sd_innov_gamma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector<vector_d> theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<vector_d> diff(D, (vector_d(static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(diff, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(diff,DUMMY_VAR__);
        vector<vector_d> kappa(D, (vector_d(static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(kappa, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(kappa,DUMMY_VAR__);
        vector_d disc(static_cast<Eigen::VectorXd::Index>(Q));
        (void) disc;  // dummy to suppress unused var warning
        stan::math::initialize(disc, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(disc,DUMMY_VAR__);
        vector_d sd_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) sd_item;  // dummy to suppress unused var warning
        stan::math::initialize(sd_item, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sd_item,DUMMY_VAR__);
        vector_d var_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) var_item;  // dummy to suppress unused var warning
        stan::math::initialize(var_item, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_item,DUMMY_VAR__);
        vector_d var_theta(static_cast<Eigen::VectorXd::Index>(T));
        (void) var_theta;  // dummy to suppress unused var warning
        stan::math::initialize(var_theta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_theta,DUMMY_VAR__);
        vector<vector_d> var_theta_bar_l2(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(var_theta_bar_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_theta_bar_l2,DUMMY_VAR__);
        vector<vector_d> gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<vector_d> mu_theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<vector_d> mu_gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<vector_d> > z(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<vector_d> > z_l2(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(z_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z_l2,DUMMY_VAR__);
        vector<vector<vector<double> > > prob(T, (vector<vector<double> >(Q, (vector<double>(G, 0.0)))));
        stan::math::initialize(prob, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prob,DUMMY_VAR__);
        vector<vector<vector_d> > prob_l2(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(prob_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prob_l2,DUMMY_VAR__);
        vector<vector_d> theta_l2(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(theta_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta_l2,DUMMY_VAR__);


        try {
            current_statement_begin__ = 68;
            stan::math::assign(disc, multiply(disc_raw,pow(exp(sum(log(disc_raw))),-(inv(Q)))));
            current_statement_begin__ = 69;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 70;
                stan::math::assign(get_base1_lhs(sd_item,q,"sd_item",1), inv(get_base1(disc,q,"disc",1)));
            }
            current_statement_begin__ = 72;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 74;
                stan::math::assign(get_base1_lhs(diff,d,"diff",1), subtract(get_base1(diff_raw,d,"diff_raw",1),mean(get_base1(diff_raw,1,"diff_raw",1))));
                current_statement_begin__ = 75;
                stan::math::assign(get_base1_lhs(kappa,d,"kappa",1), elt_divide(get_base1(diff,d,"diff",1),disc));
            }
            current_statement_begin__ = 77;
            stan::math::assign(var_item, elt_multiply(sd_item,sd_item));
            current_statement_begin__ = 78;
            stan::math::assign(var_theta, elt_multiply(sd_theta,sd_theta));
            current_statement_begin__ = 79;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 80;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 81;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 82;
                    stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    current_statement_begin__ = 83;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 86;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 87;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 95;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 96;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    } else {

                        current_statement_begin__ = 100;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), add(multiply(get_base1(gamma,(t - 1),"gamma",1),get_base1(delta_gamma,t,"delta_gamma",1)),multiply(get_base1(ZZ,t,"ZZ",1),get_base1(nu_geo,t,"nu_geo",1))));
                        current_statement_begin__ = 101;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 103;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 107;
                stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                current_statement_begin__ = 109;
                stan::math::assign(get_base1_lhs(theta_l2,t,"theta_l2",1), multiply(get_base1(WT,t,"WT",1),get_base1(theta_bar,t,"theta_bar",1)));
                current_statement_begin__ = 110;
                for (int n = 1; n <= G_hier; ++n) {
                    {
                        matrix_d WTdiag(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(G));
                        (void) WTdiag;  // dummy to suppress unused var warning
                        stan::math::initialize(WTdiag, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(WTdiag,DUMMY_VAR__);


                        current_statement_begin__ = 112;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 113;
                            for (int h = 1; h <= G; ++h) {

                                current_statement_begin__ = 114;
                                if (as_bool(logical_eq(g,h))) {

                                    current_statement_begin__ = 115;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), get_base1(get_base1(WT,t,"WT",1),n,g,"WT",2));
                                }
                                current_statement_begin__ = 117;
                                if (as_bool(logical_neq(g,h))) {

                                    current_statement_begin__ = 118;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), 0);
                                }
                            }
                        }
                        current_statement_begin__ = 123;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2), multiply(multiply(transpose(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))),WTdiag),subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))));
                    }
                }
                current_statement_begin__ = 126;
                for (int q = 1; q <= Q; ++q) {
                    {
                        double sd_tq(0.0);
                        (void) sd_tq;  // dummy to suppress unused var warning
                        stan::math::initialize(sd_tq, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(sd_tq,DUMMY_VAR__);
                        vector<double> sd_l2_tq(G_hier, 0.0);
                        stan::math::initialize(sd_l2_tq, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(sd_l2_tq,DUMMY_VAR__);


                        current_statement_begin__ = 129;
                        stan::math::assign(sd_tq, sqrt((get_base1(var_theta,t,"var_theta",1) + get_base1(var_item,q,"var_item",1))));
                        current_statement_begin__ = 130;
                        for (int n = 1; n <= G_hier; ++n) {

                            current_statement_begin__ = 131;
                            stan::math::assign(get_base1_lhs(sd_l2_tq,n,"sd_l2_tq",1), sqrt((square(sd_tq) + get_base1(get_base1(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2))));
                        }
                        current_statement_begin__ = 134;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 135;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 136;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 137;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 139;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 142;
                        if (as_bool(logical_eq(constant_item,1))) {

                            current_statement_begin__ = 143;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 144;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 145;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 147;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 150;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 151;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"disc",disc,0);
        check_greater_or_equal(function__,"sd_item",sd_item,0);
        check_greater_or_equal(function__,"var_item",var_item,0);
        check_greater_or_equal(function__,"var_theta",var_theta,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(diff[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(kappa[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(disc[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(sd_item[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(var_item[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(var_theta[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < G_hier; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(var_theta_bar_l2[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_gamma[k_0__][k_1__]);
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(z[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G_hier; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(z_l2[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(prob[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G_hier; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(prob_l2[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_1__ = 0; k_1__ < G_hier; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_l2[k_0__][k_1__]);
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d sd_total(static_cast<Eigen::VectorXd::Index>(T));
        (void) sd_total;  // dummy to suppress unused var warning
        stan::math::initialize(sd_total, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sd_total,DUMMY_VAR__);


        try {
            current_statement_begin__ = 224;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 225;
                stan::math::assign(get_base1_lhs(sd_total,t,"sd_total",1), sqrt((variance(get_base1(theta_bar,t,"theta_bar",1)) + square(get_base1(sd_theta,t,"sd_theta",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"sd_total",sd_total,0);

        // write generated quantities
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_total[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_2015_12_16";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kappa" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "var_theta_bar_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_total" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kappa" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "var_theta_bar_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_total" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace




// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_2016_04_20_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_2016_04_20 : public prob_grad {
private:
    int G;
    int G_hier;
    int Q;
    int T;
    int N;
    int N_observed;
    int S;
    int P;
    int H;
    int Hprior;
    int D;
    int constant_item;
    int separate_t;
    double delta_tbar_prior_mean;
    double delta_tbar_prior_sd;
    double innov_sd_delta_scale;
    double innov_sd_theta_scale;
    vector<int> n_vec;
    vector<int> s_vec;
    vector<int> observed;
    vector<vector<vector<int> > > NNl2;
    vector<vector<vector<int> > > SSl2;
    matrix_d XX;
    vector<matrix_d> WT;
    vector<matrix_d> ZZ;
    vector<matrix_d> ZZ_prior;
    matrix_d l2_only;
public:
    model_2016_04_20(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_2016_04_20(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_2016_04_20_namespace::model_2016_04_20";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G_hier", "int", context__.to_vec());
        G_hier = int(0);
        vals_i__ = context__.vals_i("G_hier");
        pos__ = 0;
        G_hier = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
        Q = int(0);
        vals_i__ = context__.vals_i("Q");
        pos__ = 0;
        Q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "T", "int", context__.to_vec());
        T = int(0);
        vals_i__ = context__.vals_i("T");
        pos__ = 0;
        T = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_observed", "int", context__.to_vec());
        N_observed = int(0);
        vals_i__ = context__.vals_i("N_observed");
        pos__ = 0;
        N_observed = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "P", "int", context__.to_vec());
        P = int(0);
        vals_i__ = context__.vals_i("P");
        pos__ = 0;
        P = vals_i__[pos__++];
        context__.validate_dims("data initialization", "H", "int", context__.to_vec());
        H = int(0);
        vals_i__ = context__.vals_i("H");
        pos__ = 0;
        H = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Hprior", "int", context__.to_vec());
        Hprior = int(0);
        vals_i__ = context__.vals_i("Hprior");
        pos__ = 0;
        Hprior = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "constant_item", "int", context__.to_vec());
        constant_item = int(0);
        vals_i__ = context__.vals_i("constant_item");
        pos__ = 0;
        constant_item = vals_i__[pos__++];
        context__.validate_dims("data initialization", "separate_t", "int", context__.to_vec());
        separate_t = int(0);
        vals_i__ = context__.vals_i("separate_t");
        pos__ = 0;
        separate_t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_mean", "double", context__.to_vec());
        delta_tbar_prior_mean = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_mean");
        pos__ = 0;
        delta_tbar_prior_mean = vals_r__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_sd", "double", context__.to_vec());
        delta_tbar_prior_sd = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_sd");
        pos__ = 0;
        delta_tbar_prior_sd = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_delta_scale", "double", context__.to_vec());
        innov_sd_delta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_delta_scale");
        pos__ = 0;
        innov_sd_delta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_theta_scale", "double", context__.to_vec());
        innov_sd_theta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_theta_scale");
        pos__ = 0;
        innov_sd_theta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "n_vec", "int", context__.to_vec(N));
        validate_non_negative_index("n_vec", "N", N);
        n_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("n_vec");
        pos__ = 0;
        size_t n_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < n_vec_limit_0__; ++i_0__) {
            n_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "s_vec", "int", context__.to_vec(N));
        validate_non_negative_index("s_vec", "N", N);
        s_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("s_vec");
        pos__ = 0;
        size_t s_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < s_vec_limit_0__; ++i_0__) {
            s_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "observed", "int", context__.to_vec(N_observed));
        validate_non_negative_index("observed", "N_observed", N_observed);
        observed = std::vector<int>(N_observed,int(0));
        vals_i__ = context__.vals_i("observed");
        pos__ = 0;
        size_t observed_limit_0__ = N_observed;
        for (size_t i_0__ = 0; i_0__ < observed_limit_0__; ++i_0__) {
            observed[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "NNl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("NNl2", "T", T);
        validate_non_negative_index("NNl2", "Q", Q);
        validate_non_negative_index("NNl2", "G_hier", G_hier);
        NNl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("NNl2");
        pos__ = 0;
        size_t NNl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < NNl2_limit_2__; ++i_2__) {
            size_t NNl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < NNl2_limit_1__; ++i_1__) {
                size_t NNl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < NNl2_limit_0__; ++i_0__) {
                    NNl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "SSl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("SSl2", "T", T);
        validate_non_negative_index("SSl2", "Q", Q);
        validate_non_negative_index("SSl2", "G_hier", G_hier);
        SSl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("SSl2");
        pos__ = 0;
        size_t SSl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < SSl2_limit_2__; ++i_2__) {
            size_t SSl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < SSl2_limit_1__; ++i_1__) {
                size_t SSl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < SSl2_limit_0__; ++i_0__) {
                    SSl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "XX", "matrix_d", context__.to_vec(G,P));
        validate_non_negative_index("XX", "G", G);
        validate_non_negative_index("XX", "P", P);
        XX = matrix_d(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(P));
        vals_r__ = context__.vals_r("XX");
        pos__ = 0;
        size_t XX_m_mat_lim__ = G;
        size_t XX_n_mat_lim__ = P;
        for (size_t n_mat__ = 0; n_mat__ < XX_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < XX_m_mat_lim__; ++m_mat__) {
                XX(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "WT", "matrix_d", context__.to_vec(T,G_hier,G));
        validate_non_negative_index("WT", "T", T);
        validate_non_negative_index("WT", "G_hier", G_hier);
        validate_non_negative_index("WT", "G", G);
        WT = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(G_hier),static_cast<Eigen::VectorXd::Index>(G)));
        vals_r__ = context__.vals_r("WT");
        pos__ = 0;
        size_t WT_m_mat_lim__ = G_hier;
        size_t WT_n_mat_lim__ = G;
        for (size_t n_mat__ = 0; n_mat__ < WT_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < WT_m_mat_lim__; ++m_mat__) {
                size_t WT_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < WT_limit_0__; ++i_0__) {
                    WT[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ", "matrix_d", context__.to_vec(T,P,H));
        validate_non_negative_index("ZZ", "T", T);
        validate_non_negative_index("ZZ", "P", P);
        validate_non_negative_index("ZZ", "H", H);
        ZZ = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(H)));
        vals_r__ = context__.vals_r("ZZ");
        pos__ = 0;
        size_t ZZ_m_mat_lim__ = P;
        size_t ZZ_n_mat_lim__ = H;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_m_mat_lim__; ++m_mat__) {
                size_t ZZ_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_limit_0__; ++i_0__) {
                    ZZ[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ_prior", "matrix_d", context__.to_vec(T,P,Hprior));
        validate_non_negative_index("ZZ_prior", "T", T);
        validate_non_negative_index("ZZ_prior", "P", P);
        validate_non_negative_index("ZZ_prior", "Hprior", Hprior);
        ZZ_prior = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(Hprior)));
        vals_r__ = context__.vals_r("ZZ_prior");
        pos__ = 0;
        size_t ZZ_prior_m_mat_lim__ = P;
        size_t ZZ_prior_n_mat_lim__ = Hprior;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_prior_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_prior_m_mat_lim__; ++m_mat__) {
                size_t ZZ_prior_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_prior_limit_0__; ++i_0__) {
                    ZZ_prior[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "l2_only", "matrix_d", context__.to_vec(T,Q));
        validate_non_negative_index("l2_only", "T", T);
        validate_non_negative_index("l2_only", "Q", Q);
        l2_only = matrix_d(static_cast<Eigen::VectorXd::Index>(T),static_cast<Eigen::VectorXd::Index>(Q));
        vals_r__ = context__.vals_r("l2_only");
        pos__ = 0;
        size_t l2_only_m_mat_lim__ = T;
        size_t l2_only_n_mat_lim__ = Q;
        for (size_t n_mat__ = 0; n_mat__ < l2_only_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < l2_only_m_mat_lim__; ++m_mat__) {
                l2_only(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"G_hier",G_hier,1);
        check_greater_or_equal(function__,"Q",Q,1);
        check_greater_or_equal(function__,"T",T,1);
        check_greater_or_equal(function__,"N",N,1);
        check_greater_or_equal(function__,"N_observed",N_observed,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"P",P,1);
        check_greater_or_equal(function__,"H",H,1);
        check_greater_or_equal(function__,"Hprior",Hprior,1);
        check_greater_or_equal(function__,"D",D,1);
        check_greater_or_equal(function__,"constant_item",constant_item,0);
        check_less_or_equal(function__,"constant_item",constant_item,1);
        check_greater_or_equal(function__,"separate_t",separate_t,0);
        check_less_or_equal(function__,"separate_t",separate_t,1);
        check_greater_or_equal(function__,"delta_tbar_prior_sd",delta_tbar_prior_sd,0);
        check_greater_or_equal(function__,"innov_sd_delta_scale",innov_sd_delta_scale,0);
        check_greater_or_equal(function__,"innov_sd_theta_scale",innov_sd_theta_scale,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"n_vec[k0__]",n_vec[k0__],0);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"s_vec[k0__]",s_vec[k0__],0);
        }
        check_greater_or_equal(function__,"XX",XX,0);
        check_less_or_equal(function__,"XX",XX,1);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            check_greater_or_equal(function__,"WT[k0__]",WT[k0__],0);
            check_less_or_equal(function__,"WT[k0__]",WT[k0__],1);
        }
        check_greater_or_equal(function__,"l2_only",l2_only,0);
        check_less_or_equal(function__,"l2_only",l2_only,1);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += Q * D;
        num_params_r__ += Q;
        num_params_r__ += T;
        num_params_r__ += P * T;
        num_params_r__ += T;
        num_params_r__ += H * T;
        num_params_r__ += Hprior;
        num_params_r__ += T;
        num_params_r__ += G * T;
        num_params_r__ += T;
        num_params_r__ += T;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~model_2016_04_20() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("diff_raw")))
            throw std::runtime_error("variable diff_raw missing");
        vals_r__ = context__.vals_r("diff_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "diff_raw", "vector_d", context__.to_vec(D,Q));
        // generate_declaration diff_raw
        std::vector<vector_d> diff_raw(D,vector_d(static_cast<Eigen::VectorXd::Index>(Q)));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            for (int i0__ = 0U; i0__ < D; ++i0__)
                diff_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < D; ++i0__)
            try {
            writer__.vector_unconstrain(diff_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable diff_raw: ") + e.what());
        }

        if (!(context__.contains_r("disc_raw")))
            throw std::runtime_error("variable disc_raw missing");
        vals_r__ = context__.vals_r("disc_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "disc_raw", "vector_d", context__.to_vec(Q));
        // generate_declaration disc_raw
        vector_d disc_raw(static_cast<Eigen::VectorXd::Index>(Q));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            disc_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,disc_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable disc_raw: ") + e.what());
        }

        if (!(context__.contains_r("xi")))
            throw std::runtime_error("variable xi missing");
        vals_r__ = context__.vals_r("xi");
        pos__ = 0U;
        context__.validate_dims("initialization", "xi", "vector_d", context__.to_vec(T));
        // generate_declaration xi
        vector_d xi(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            xi(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(xi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xi: ") + e.what());
        }

        if (!(context__.contains_r("gamma_raw")))
            throw std::runtime_error("variable gamma_raw missing");
        vals_r__ = context__.vals_r("gamma_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma_raw", "vector_d", context__.to_vec(T,P));
        // generate_declaration gamma_raw
        std::vector<vector_d> gamma_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(P)));
        for (int j1__ = 0U; j1__ < P; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                gamma_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(gamma_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma_raw: ") + e.what());
        }

        if (!(context__.contains_r("delta_gamma")))
            throw std::runtime_error("variable delta_gamma missing");
        vals_r__ = context__.vals_r("delta_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_gamma", "vector_d", context__.to_vec(T));
        // generate_declaration delta_gamma
        vector_d delta_gamma(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_gamma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_gamma: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo")))
            throw std::runtime_error("variable nu_geo missing");
        vals_r__ = context__.vals_r("nu_geo");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo", "vector_d", context__.to_vec(T,H));
        // generate_declaration nu_geo
        std::vector<vector_d> nu_geo(T,vector_d(static_cast<Eigen::VectorXd::Index>(H)));
        for (int j1__ = 0U; j1__ < H; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                nu_geo[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(nu_geo[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo_prior")))
            throw std::runtime_error("variable nu_geo_prior missing");
        vals_r__ = context__.vals_r("nu_geo_prior");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo_prior", "vector_d", context__.to_vec(Hprior));
        // generate_declaration nu_geo_prior
        vector_d nu_geo_prior(static_cast<Eigen::VectorXd::Index>(Hprior));
        for (int j1__ = 0U; j1__ < Hprior; ++j1__)
            nu_geo_prior(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(nu_geo_prior);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo_prior: ") + e.what());
        }

        if (!(context__.contains_r("delta_tbar")))
            throw std::runtime_error("variable delta_tbar missing");
        vals_r__ = context__.vals_r("delta_tbar");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_tbar", "vector_d", context__.to_vec(T));
        // generate_declaration delta_tbar
        vector_d delta_tbar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_tbar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_tbar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_tbar: ") + e.what());
        }

        if (!(context__.contains_r("theta_bar_raw")))
            throw std::runtime_error("variable theta_bar_raw missing");
        vals_r__ = context__.vals_r("theta_bar_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_bar_raw", "vector_d", context__.to_vec(T,G));
        // generate_declaration theta_bar_raw
        std::vector<vector_d> theta_bar_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(G)));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                theta_bar_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(theta_bar_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_bar_raw: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta_bar")))
            throw std::runtime_error("variable sd_theta_bar missing");
        vals_r__ = context__.vals_r("sd_theta_bar");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta_bar", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta_bar
        vector_d sd_theta_bar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta_bar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta_bar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta_bar: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta")))
            throw std::runtime_error("variable sd_theta missing");
        vals_r__ = context__.vals_r("sd_theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta
        vector_d sd_theta(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta: ") + e.what());
        }

        if (!(context__.contains_r("sd_gamma")))
            throw std::runtime_error("variable sd_gamma missing");
        vals_r__ = context__.vals_r("sd_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_gamma", "double", context__.to_vec());
        // generate_declaration sd_gamma
        double sd_gamma(0);
        sd_gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_gamma: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_delta")))
            throw std::runtime_error("variable sd_innov_delta missing");
        vals_r__ = context__.vals_r("sd_innov_delta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_delta", "double", context__.to_vec());
        // generate_declaration sd_innov_delta
        double sd_innov_delta(0);
        sd_innov_delta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_delta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_delta: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_logsd")))
            throw std::runtime_error("variable sd_innov_logsd missing");
        vals_r__ = context__.vals_r("sd_innov_logsd");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_logsd", "double", context__.to_vec());
        // generate_declaration sd_innov_logsd
        double sd_innov_logsd(0);
        sd_innov_logsd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_logsd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_logsd: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_gamma")))
            throw std::runtime_error("variable sd_innov_gamma missing");
        vals_r__ = context__.vals_r("sd_innov_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_gamma", "double", context__.to_vec());
        // generate_declaration sd_innov_gamma
        double sd_innov_gamma(0);
        sd_innov_gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_gamma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > diff_raw;
        size_t dim_diff_raw_0__ = D;
        diff_raw.reserve(dim_diff_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_diff_raw_0__; ++k_0__) {
            if (jacobian__)
                diff_raw.push_back(in__.vector_constrain(Q,lp__));
            else
                diff_raw.push_back(in__.vector_constrain(Q));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  disc_raw;
        (void) disc_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            disc_raw = in__.vector_lb_constrain(0,Q,lp__);
        else
            disc_raw = in__.vector_lb_constrain(0,Q);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  xi;
        (void) xi;  // dummy to suppress unused var warning
        if (jacobian__)
            xi = in__.vector_constrain(T,lp__);
        else
            xi = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        gamma_raw.reserve(dim_gamma_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            if (jacobian__)
                gamma_raw.push_back(in__.vector_constrain(P,lp__));
            else
                gamma_raw.push_back(in__.vector_constrain(P));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_gamma;
        (void) delta_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_gamma = in__.vector_constrain(T,lp__);
        else
            delta_gamma = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > nu_geo;
        size_t dim_nu_geo_0__ = T;
        nu_geo.reserve(dim_nu_geo_0__);
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            if (jacobian__)
                nu_geo.push_back(in__.vector_constrain(H,lp__));
            else
                nu_geo.push_back(in__.vector_constrain(H));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  nu_geo_prior;
        (void) nu_geo_prior;  // dummy to suppress unused var warning
        if (jacobian__)
            nu_geo_prior = in__.vector_constrain(Hprior,lp__);
        else
            nu_geo_prior = in__.vector_constrain(Hprior);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_tbar;
        (void) delta_tbar;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_tbar = in__.vector_constrain(T,lp__);
        else
            delta_tbar = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        theta_bar_raw.reserve(dim_theta_bar_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            if (jacobian__)
                theta_bar_raw.push_back(in__.vector_constrain(G,lp__));
            else
                theta_bar_raw.push_back(in__.vector_constrain(G));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta_bar;
        (void) sd_theta_bar;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta_bar = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta_bar = in__.vector_lb_constrain(0,T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta;
        (void) sd_theta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta = in__.vector_lb_constrain(0,T);

        T__ sd_gamma;
        (void) sd_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_gamma = in__.scalar_lb_constrain(0,lp__);
        else
            sd_gamma = in__.scalar_lb_constrain(0);

        T__ sd_innov_delta;
        (void) sd_innov_delta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_delta = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_delta = in__.scalar_lb_constrain(0);

        T__ sd_innov_logsd;
        (void) sd_innov_logsd;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_logsd = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_logsd = in__.scalar_lb_constrain(0);

        T__ sd_innov_gamma;
        (void) sd_innov_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_gamma = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_gamma = in__.scalar_lb_constrain(0);


        // transformed parameters
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, DUMMY_VAR__);
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > diff(D, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(diff, DUMMY_VAR__);
        stan::math::fill(diff,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > kappa(D, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(kappa, DUMMY_VAR__);
        stan::math::fill(kappa,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  disc(static_cast<Eigen::VectorXd::Index>(Q));
        (void) disc;  // dummy to suppress unused var warning
        stan::math::initialize(disc, DUMMY_VAR__);
        stan::math::fill(disc,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) sd_item;  // dummy to suppress unused var warning
        stan::math::initialize(sd_item, DUMMY_VAR__);
        stan::math::fill(sd_item,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  var_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) var_item;  // dummy to suppress unused var warning
        stan::math::initialize(var_item, DUMMY_VAR__);
        stan::math::fill(var_item,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  var_theta(static_cast<Eigen::VectorXd::Index>(T));
        (void) var_theta;  // dummy to suppress unused var warning
        stan::math::initialize(var_theta, DUMMY_VAR__);
        stan::math::fill(var_theta,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > var_theta_bar_l2(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(var_theta_bar_l2, DUMMY_VAR__);
        stan::math::fill(var_theta_bar_l2,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, DUMMY_VAR__);
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, DUMMY_VAR__);
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > z(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > z_l2(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(z_l2, DUMMY_VAR__);
        stan::math::fill(z_l2,DUMMY_VAR__);
        vector<vector<vector<T__> > > prob(T, (vector<vector<T__> >(Q, (vector<T__>(G)))));
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > prob_l2(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(prob_l2, DUMMY_VAR__);
        stan::math::fill(prob_l2,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_l2(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(theta_l2, DUMMY_VAR__);
        stan::math::fill(theta_l2,DUMMY_VAR__);


        try {
            current_statement_begin__ = 72;
            stan::math::assign(disc, multiply(disc_raw,pow(exp(sum(log(disc_raw))),-(inv(Q)))));
            current_statement_begin__ = 73;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 74;
                stan::math::assign(get_base1_lhs(sd_item,q,"sd_item",1), inv(get_base1(disc,q,"disc",1)));
            }
            current_statement_begin__ = 76;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 78;
                stan::math::assign(get_base1_lhs(diff,d,"diff",1), subtract(get_base1(diff_raw,d,"diff_raw",1),mean(get_base1(diff_raw,1,"diff_raw",1))));
                current_statement_begin__ = 79;
                stan::math::assign(get_base1_lhs(kappa,d,"kappa",1), elt_divide(get_base1(diff,d,"diff",1),disc));
            }
            current_statement_begin__ = 81;
            stan::math::assign(var_item, elt_multiply(sd_item,sd_item));
            current_statement_begin__ = 82;
            stan::math::assign(var_theta, elt_multiply(sd_theta,sd_theta));
            current_statement_begin__ = 83;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 84;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 85;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 86;
                    stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    current_statement_begin__ = 87;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 90;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 91;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 99;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 100;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    } else {

                        current_statement_begin__ = 104;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), add(multiply(get_base1(gamma,(t - 1),"gamma",1),get_base1(delta_gamma,t,"delta_gamma",1)),multiply(get_base1(ZZ,t,"ZZ",1),get_base1(nu_geo,t,"nu_geo",1))));
                        current_statement_begin__ = 105;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 107;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 111;
                stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                current_statement_begin__ = 113;
                stan::math::assign(get_base1_lhs(theta_l2,t,"theta_l2",1), multiply(get_base1(WT,t,"WT",1),get_base1(theta_bar,t,"theta_bar",1)));
                current_statement_begin__ = 114;
                for (int n = 1; n <= G_hier; ++n) {
                    {
                        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  WTdiag(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(G));
                        (void) WTdiag;  // dummy to suppress unused var warning
                        stan::math::initialize(WTdiag, DUMMY_VAR__);
                        stan::math::fill(WTdiag,DUMMY_VAR__);


                        current_statement_begin__ = 116;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 117;
                            for (int h = 1; h <= G; ++h) {

                                current_statement_begin__ = 118;
                                if (as_bool(logical_eq(g,h))) {

                                    current_statement_begin__ = 119;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), get_base1(get_base1(WT,t,"WT",1),n,g,"WT",2));
                                }
                                current_statement_begin__ = 121;
                                if (as_bool(logical_neq(g,h))) {

                                    current_statement_begin__ = 122;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), 0);
                                }
                            }
                        }
                        current_statement_begin__ = 127;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2), multiply(multiply(transpose(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))),WTdiag),subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))));
                    }
                }
                current_statement_begin__ = 130;
                for (int q = 1; q <= Q; ++q) {
                    {
                        T__ sd_tq;
                        (void) sd_tq;  // dummy to suppress unused var warning
                        stan::math::initialize(sd_tq, DUMMY_VAR__);
                        stan::math::fill(sd_tq,DUMMY_VAR__);
                        vector<T__> sd_l2_tq(G_hier);
                        stan::math::initialize(sd_l2_tq, DUMMY_VAR__);
                        stan::math::fill(sd_l2_tq,DUMMY_VAR__);


                        current_statement_begin__ = 133;
                        stan::math::assign(sd_tq, sqrt((get_base1(var_theta,t,"var_theta",1) + get_base1(var_item,q,"var_item",1))));
                        current_statement_begin__ = 134;
                        for (int n = 1; n <= G_hier; ++n) {

                            current_statement_begin__ = 135;
                            stan::math::assign(get_base1_lhs(sd_l2_tq,n,"sd_l2_tq",1), sqrt((square(sd_tq) + get_base1(get_base1(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2))));
                        }
                        current_statement_begin__ = 138;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 139;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 140;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 141;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 143;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 146;
                        if (as_bool(logical_eq(constant_item,1))) {

                            current_statement_begin__ = 147;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 148;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 149;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 151;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 154;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 155;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < D; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                if (stan::math::is_uninitialized(diff[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: diff" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < D; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                if (stan::math::is_uninitialized(kappa[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: kappa" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(disc(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: disc" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(sd_item(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sd_item" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(var_item(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: var_item" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            if (stan::math::is_uninitialized(var_theta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: var_theta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G_hier; ++i1__) {
                if (stan::math::is_uninitialized(var_theta_bar_l2[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: var_theta_bar_l2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(mu_theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(mu_gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(z[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G_hier; ++i2__) {
                    if (stan::math::is_uninitialized(z_l2[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z_l2" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(prob[i0__][i1__][i2__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prob" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G_hier; ++i2__) {
                    if (stan::math::is_uninitialized(prob_l2[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prob_l2" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G_hier; ++i1__) {
                if (stan::math::is_uninitialized(theta_l2[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_l2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"disc",disc,0);
        check_greater_or_equal(function__,"sd_item",sd_item,0);
        check_greater_or_equal(function__,"var_item",var_item,0);
        check_greater_or_equal(function__,"var_theta",var_theta,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // model body
        try {
            {
                vector<T__> prob_vec(N);
                stan::math::initialize(prob_vec, DUMMY_VAR__);
                stan::math::fill(prob_vec,DUMMY_VAR__);
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning
                stan::math::fill(pos, std::numeric_limits<int>::min());


                current_statement_begin__ = 165;
                stan::math::assign(pos, 0);
                current_statement_begin__ = 168;
                if (as_bool(logical_eq(constant_item,1))) {

                    current_statement_begin__ = 169;
                    lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,1,"diff_raw",1), 0, 1));
                }
                current_statement_begin__ = 171;
                lp_accum__.add(lognormal_log<propto__>(disc_raw, 0, 1));
                current_statement_begin__ = 172;
                lp_accum__.add(cauchy_log<propto__>(sd_gamma, 0, 2.5));
                current_statement_begin__ = 173;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_delta, 0, innov_sd_delta_scale));
                current_statement_begin__ = 174;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_gamma, 0, 2.5));
                current_statement_begin__ = 175;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_logsd, 0, innov_sd_theta_scale));
                current_statement_begin__ = 177;
                for (int t = 1; t <= T; ++t) {

                    current_statement_begin__ = 178;
                    lp_accum__.add(normal_log<propto__>(get_base1(gamma_raw,t,"gamma_raw",1), 0, 1));
                    current_statement_begin__ = 179;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta_bar_raw,t,"theta_bar_raw",1), 0, 1));
                    current_statement_begin__ = 180;
                    if (as_bool(logical_eq(t,1))) {

                        current_statement_begin__ = 181;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 182;
                            lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,t,"diff_raw",1), 0, 1));
                        }
                        current_statement_begin__ = 185;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), 0, 2.5));
                        current_statement_begin__ = 186;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta,t,"sd_theta",1), 0, 2.5));
                        current_statement_begin__ = 187;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), 0, 10));
                        current_statement_begin__ = 188;
                        lp_accum__.add(normal_log<propto__>(nu_geo_prior, 0, 10));
                        current_statement_begin__ = 189;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), 0.5, 0.5));
                        current_statement_begin__ = 190;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), delta_tbar_prior_mean, delta_tbar_prior_sd));
                        current_statement_begin__ = 191;
                        lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                    }
                    current_statement_begin__ = 193;
                    if (as_bool(logical_gt(t,1))) {

                        current_statement_begin__ = 197;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 198;
                            lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,t,"diff_raw",1), get_base1(diff_raw,(t - 1),"diff_raw",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 202;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), get_base1(delta_gamma,(t - 1),"delta_gamma",1), sd_innov_delta));
                        current_statement_begin__ = 203;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), get_base1(nu_geo,(t - 1),"nu_geo",1), sd_innov_delta));
                        current_statement_begin__ = 204;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), get_base1(delta_tbar,(t - 1),"delta_tbar",1), sd_innov_delta));
                        current_statement_begin__ = 205;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), log(get_base1(sd_theta_bar,(t - 1),"sd_theta_bar",1)), sd_innov_logsd));
                        current_statement_begin__ = 206;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta,t,"sd_theta",1), log(get_base1(sd_theta,(t - 1),"sd_theta",1)), sd_innov_logsd));
                        current_statement_begin__ = 207;
                        if (as_bool((primitive_value(logical_eq(separate_t,0)) && primitive_value(logical_gt(t,2))))) {

                            current_statement_begin__ = 208;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), get_base1(xi,(t - 1),"xi",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 210;
                        if (as_bool((primitive_value(logical_eq(separate_t,1)) || primitive_value(logical_eq(t,2))))) {

                            current_statement_begin__ = 211;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                        }
                    }
                    current_statement_begin__ = 215;
                    for (int q = 1; q <= Q; ++q) {

                        current_statement_begin__ = 221;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 222;
                            stan::math::assign(pos, (pos + 1));
                            current_statement_begin__ = 223;
                            stan::math::assign(get_base1_lhs(prob_vec,pos,"prob_vec",1), get_base1(get_base1(get_base1(prob,t,"prob",1),q,"prob",2),g,"prob",3));
                        }
                    }
                }
                current_statement_begin__ = 230;
                lp_accum__.add(binomial_log<propto__>(stan::model::rvalue(s_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "s_vec"), stan::model::rvalue(n_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "n_vec"), stan::model::rvalue(prob_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "prob_vec")));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("diff_raw");
        names__.push_back("disc_raw");
        names__.push_back("xi");
        names__.push_back("gamma_raw");
        names__.push_back("delta_gamma");
        names__.push_back("nu_geo");
        names__.push_back("nu_geo_prior");
        names__.push_back("delta_tbar");
        names__.push_back("theta_bar_raw");
        names__.push_back("sd_theta_bar");
        names__.push_back("sd_theta");
        names__.push_back("sd_gamma");
        names__.push_back("sd_innov_delta");
        names__.push_back("sd_innov_logsd");
        names__.push_back("sd_innov_gamma");
        names__.push_back("theta_bar");
        names__.push_back("diff");
        names__.push_back("kappa");
        names__.push_back("disc");
        names__.push_back("sd_item");
        names__.push_back("var_item");
        names__.push_back("var_theta");
        names__.push_back("var_theta_bar_l2");
        names__.push_back("gamma");
        names__.push_back("mu_theta_bar");
        names__.push_back("mu_gamma");
        names__.push_back("z");
        names__.push_back("z_l2");
        names__.push_back("prob");
        names__.push_back("prob_l2");
        names__.push_back("theta_l2");
        names__.push_back("sd_total");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Hprior);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_2016_04_20_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<vector_d> diff_raw;
        size_t dim_diff_raw_0__ = D;
        for (size_t k_0__ = 0; k_0__ < dim_diff_raw_0__; ++k_0__) {
            diff_raw.push_back(in__.vector_constrain(Q));
        }
        vector_d disc_raw = in__.vector_lb_constrain(0,Q);
        vector_d xi = in__.vector_constrain(T);
        vector<vector_d> gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            gamma_raw.push_back(in__.vector_constrain(P));
        }
        vector_d delta_gamma = in__.vector_constrain(T);
        vector<vector_d> nu_geo;
        size_t dim_nu_geo_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            nu_geo.push_back(in__.vector_constrain(H));
        }
        vector_d nu_geo_prior = in__.vector_constrain(Hprior);
        vector_d delta_tbar = in__.vector_constrain(T);
        vector<vector_d> theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            theta_bar_raw.push_back(in__.vector_constrain(G));
        }
        vector_d sd_theta_bar = in__.vector_lb_constrain(0,T);
        vector_d sd_theta = in__.vector_lb_constrain(0,T);
        double sd_gamma = in__.scalar_lb_constrain(0);
        double sd_innov_delta = in__.scalar_lb_constrain(0);
        double sd_innov_logsd = in__.scalar_lb_constrain(0);
        double sd_innov_gamma = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(diff_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(disc_raw[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(xi[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_gamma[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < H; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(nu_geo[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Hprior; ++k_0__) {
            vars__.push_back(nu_geo_prior[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_tbar[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta_bar[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta[k_0__]);
        }
        vars__.push_back(sd_gamma);
        vars__.push_back(sd_innov_delta);
        vars__.push_back(sd_innov_logsd);
        vars__.push_back(sd_innov_gamma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector<vector_d> theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<vector_d> diff(D, (vector_d(static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(diff, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(diff,DUMMY_VAR__);
        vector<vector_d> kappa(D, (vector_d(static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(kappa, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(kappa,DUMMY_VAR__);
        vector_d disc(static_cast<Eigen::VectorXd::Index>(Q));
        (void) disc;  // dummy to suppress unused var warning
        stan::math::initialize(disc, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(disc,DUMMY_VAR__);
        vector_d sd_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) sd_item;  // dummy to suppress unused var warning
        stan::math::initialize(sd_item, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sd_item,DUMMY_VAR__);
        vector_d var_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) var_item;  // dummy to suppress unused var warning
        stan::math::initialize(var_item, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_item,DUMMY_VAR__);
        vector_d var_theta(static_cast<Eigen::VectorXd::Index>(T));
        (void) var_theta;  // dummy to suppress unused var warning
        stan::math::initialize(var_theta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_theta,DUMMY_VAR__);
        vector<vector_d> var_theta_bar_l2(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(var_theta_bar_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_theta_bar_l2,DUMMY_VAR__);
        vector<vector_d> gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<vector_d> mu_theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<vector_d> mu_gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<vector_d> > z(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<vector_d> > z_l2(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(z_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z_l2,DUMMY_VAR__);
        vector<vector<vector<double> > > prob(T, (vector<vector<double> >(Q, (vector<double>(G, 0.0)))));
        stan::math::initialize(prob, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prob,DUMMY_VAR__);
        vector<vector<vector_d> > prob_l2(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(prob_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prob_l2,DUMMY_VAR__);
        vector<vector_d> theta_l2(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(theta_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta_l2,DUMMY_VAR__);


        try {
            current_statement_begin__ = 72;
            stan::math::assign(disc, multiply(disc_raw,pow(exp(sum(log(disc_raw))),-(inv(Q)))));
            current_statement_begin__ = 73;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 74;
                stan::math::assign(get_base1_lhs(sd_item,q,"sd_item",1), inv(get_base1(disc,q,"disc",1)));
            }
            current_statement_begin__ = 76;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 78;
                stan::math::assign(get_base1_lhs(diff,d,"diff",1), subtract(get_base1(diff_raw,d,"diff_raw",1),mean(get_base1(diff_raw,1,"diff_raw",1))));
                current_statement_begin__ = 79;
                stan::math::assign(get_base1_lhs(kappa,d,"kappa",1), elt_divide(get_base1(diff,d,"diff",1),disc));
            }
            current_statement_begin__ = 81;
            stan::math::assign(var_item, elt_multiply(sd_item,sd_item));
            current_statement_begin__ = 82;
            stan::math::assign(var_theta, elt_multiply(sd_theta,sd_theta));
            current_statement_begin__ = 83;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 84;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 85;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 86;
                    stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    current_statement_begin__ = 87;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 90;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 91;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 99;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 100;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    } else {

                        current_statement_begin__ = 104;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), add(multiply(get_base1(gamma,(t - 1),"gamma",1),get_base1(delta_gamma,t,"delta_gamma",1)),multiply(get_base1(ZZ,t,"ZZ",1),get_base1(nu_geo,t,"nu_geo",1))));
                        current_statement_begin__ = 105;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 107;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 111;
                stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                current_statement_begin__ = 113;
                stan::math::assign(get_base1_lhs(theta_l2,t,"theta_l2",1), multiply(get_base1(WT,t,"WT",1),get_base1(theta_bar,t,"theta_bar",1)));
                current_statement_begin__ = 114;
                for (int n = 1; n <= G_hier; ++n) {
                    {
                        matrix_d WTdiag(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(G));
                        (void) WTdiag;  // dummy to suppress unused var warning
                        stan::math::initialize(WTdiag, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(WTdiag,DUMMY_VAR__);


                        current_statement_begin__ = 116;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 117;
                            for (int h = 1; h <= G; ++h) {

                                current_statement_begin__ = 118;
                                if (as_bool(logical_eq(g,h))) {

                                    current_statement_begin__ = 119;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), get_base1(get_base1(WT,t,"WT",1),n,g,"WT",2));
                                }
                                current_statement_begin__ = 121;
                                if (as_bool(logical_neq(g,h))) {

                                    current_statement_begin__ = 122;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), 0);
                                }
                            }
                        }
                        current_statement_begin__ = 127;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2), multiply(multiply(transpose(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))),WTdiag),subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))));
                    }
                }
                current_statement_begin__ = 130;
                for (int q = 1; q <= Q; ++q) {
                    {
                        double sd_tq(0.0);
                        (void) sd_tq;  // dummy to suppress unused var warning
                        stan::math::initialize(sd_tq, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(sd_tq,DUMMY_VAR__);
                        vector<double> sd_l2_tq(G_hier, 0.0);
                        stan::math::initialize(sd_l2_tq, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(sd_l2_tq,DUMMY_VAR__);


                        current_statement_begin__ = 133;
                        stan::math::assign(sd_tq, sqrt((get_base1(var_theta,t,"var_theta",1) + get_base1(var_item,q,"var_item",1))));
                        current_statement_begin__ = 134;
                        for (int n = 1; n <= G_hier; ++n) {

                            current_statement_begin__ = 135;
                            stan::math::assign(get_base1_lhs(sd_l2_tq,n,"sd_l2_tq",1), sqrt((square(sd_tq) + get_base1(get_base1(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2))));
                        }
                        current_statement_begin__ = 138;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 139;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 140;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 141;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 143;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 146;
                        if (as_bool(logical_eq(constant_item,1))) {

                            current_statement_begin__ = 147;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 148;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 149;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 151;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 154;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 155;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"disc",disc,0);
        check_greater_or_equal(function__,"sd_item",sd_item,0);
        check_greater_or_equal(function__,"var_item",var_item,0);
        check_greater_or_equal(function__,"var_theta",var_theta,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(diff[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(kappa[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(disc[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(sd_item[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(var_item[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(var_theta[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < G_hier; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(var_theta_bar_l2[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_gamma[k_0__][k_1__]);
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(z[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G_hier; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(z_l2[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(prob[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G_hier; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(prob_l2[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_1__ = 0; k_1__ < G_hier; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_l2[k_0__][k_1__]);
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d sd_total(static_cast<Eigen::VectorXd::Index>(T));
        (void) sd_total;  // dummy to suppress unused var warning
        stan::math::initialize(sd_total, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sd_total,DUMMY_VAR__);


        try {
            current_statement_begin__ = 235;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 236;
                stan::math::assign(get_base1_lhs(sd_total,t,"sd_total",1), sqrt((variance(get_base1(theta_bar,t,"theta_bar",1)) + square(get_base1(sd_theta,t,"sd_theta",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"sd_total",sd_total,0);

        // write generated quantities
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_total[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_2016_04_20";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kappa" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "var_theta_bar_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_total" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kappa" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "var_theta_bar_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_total" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace




// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_2016_09_14_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_2016_09_14 : public prob_grad {
private:
    int G;
    int G_hier;
    int Q;
    int T;
    int N;
    int N_observed;
    int S;
    int P;
    int H;
    int Hprior;
    int D;
    int constant_item;
    int separate_t;
    double delta_tbar_prior_mean;
    double delta_tbar_prior_sd;
    double innov_sd_delta_scale;
    double innov_sd_theta_scale;
    vector<int> n_vec;
    vector<int> s_vec;
    vector<int> observed;
    vector<vector<vector<int> > > NNl2;
    vector<vector<vector<int> > > SSl2;
    matrix_d XX;
    vector<matrix_d> WT;
    vector<matrix_d> ZZ;
    vector<matrix_d> ZZ_prior;
    matrix_d l2_only;
public:
    model_2016_09_14(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_2016_09_14(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_2016_09_14_namespace::model_2016_09_14";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G_hier", "int", context__.to_vec());
        G_hier = int(0);
        vals_i__ = context__.vals_i("G_hier");
        pos__ = 0;
        G_hier = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
        Q = int(0);
        vals_i__ = context__.vals_i("Q");
        pos__ = 0;
        Q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "T", "int", context__.to_vec());
        T = int(0);
        vals_i__ = context__.vals_i("T");
        pos__ = 0;
        T = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_observed", "int", context__.to_vec());
        N_observed = int(0);
        vals_i__ = context__.vals_i("N_observed");
        pos__ = 0;
        N_observed = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "P", "int", context__.to_vec());
        P = int(0);
        vals_i__ = context__.vals_i("P");
        pos__ = 0;
        P = vals_i__[pos__++];
        context__.validate_dims("data initialization", "H", "int", context__.to_vec());
        H = int(0);
        vals_i__ = context__.vals_i("H");
        pos__ = 0;
        H = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Hprior", "int", context__.to_vec());
        Hprior = int(0);
        vals_i__ = context__.vals_i("Hprior");
        pos__ = 0;
        Hprior = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "constant_item", "int", context__.to_vec());
        constant_item = int(0);
        vals_i__ = context__.vals_i("constant_item");
        pos__ = 0;
        constant_item = vals_i__[pos__++];
        context__.validate_dims("data initialization", "separate_t", "int", context__.to_vec());
        separate_t = int(0);
        vals_i__ = context__.vals_i("separate_t");
        pos__ = 0;
        separate_t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_mean", "double", context__.to_vec());
        delta_tbar_prior_mean = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_mean");
        pos__ = 0;
        delta_tbar_prior_mean = vals_r__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_sd", "double", context__.to_vec());
        delta_tbar_prior_sd = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_sd");
        pos__ = 0;
        delta_tbar_prior_sd = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_delta_scale", "double", context__.to_vec());
        innov_sd_delta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_delta_scale");
        pos__ = 0;
        innov_sd_delta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_theta_scale", "double", context__.to_vec());
        innov_sd_theta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_theta_scale");
        pos__ = 0;
        innov_sd_theta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "n_vec", "int", context__.to_vec(N));
        validate_non_negative_index("n_vec", "N", N);
        n_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("n_vec");
        pos__ = 0;
        size_t n_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < n_vec_limit_0__; ++i_0__) {
            n_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "s_vec", "int", context__.to_vec(N));
        validate_non_negative_index("s_vec", "N", N);
        s_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("s_vec");
        pos__ = 0;
        size_t s_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < s_vec_limit_0__; ++i_0__) {
            s_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "observed", "int", context__.to_vec(N_observed));
        validate_non_negative_index("observed", "N_observed", N_observed);
        observed = std::vector<int>(N_observed,int(0));
        vals_i__ = context__.vals_i("observed");
        pos__ = 0;
        size_t observed_limit_0__ = N_observed;
        for (size_t i_0__ = 0; i_0__ < observed_limit_0__; ++i_0__) {
            observed[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "NNl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("NNl2", "T", T);
        validate_non_negative_index("NNl2", "Q", Q);
        validate_non_negative_index("NNl2", "G_hier", G_hier);
        NNl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("NNl2");
        pos__ = 0;
        size_t NNl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < NNl2_limit_2__; ++i_2__) {
            size_t NNl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < NNl2_limit_1__; ++i_1__) {
                size_t NNl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < NNl2_limit_0__; ++i_0__) {
                    NNl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "SSl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("SSl2", "T", T);
        validate_non_negative_index("SSl2", "Q", Q);
        validate_non_negative_index("SSl2", "G_hier", G_hier);
        SSl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("SSl2");
        pos__ = 0;
        size_t SSl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < SSl2_limit_2__; ++i_2__) {
            size_t SSl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < SSl2_limit_1__; ++i_1__) {
                size_t SSl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < SSl2_limit_0__; ++i_0__) {
                    SSl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "XX", "matrix_d", context__.to_vec(G,P));
        validate_non_negative_index("XX", "G", G);
        validate_non_negative_index("XX", "P", P);
        XX = matrix_d(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(P));
        vals_r__ = context__.vals_r("XX");
        pos__ = 0;
        size_t XX_m_mat_lim__ = G;
        size_t XX_n_mat_lim__ = P;
        for (size_t n_mat__ = 0; n_mat__ < XX_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < XX_m_mat_lim__; ++m_mat__) {
                XX(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "WT", "matrix_d", context__.to_vec(T,G_hier,G));
        validate_non_negative_index("WT", "T", T);
        validate_non_negative_index("WT", "G_hier", G_hier);
        validate_non_negative_index("WT", "G", G);
        WT = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(G_hier),static_cast<Eigen::VectorXd::Index>(G)));
        vals_r__ = context__.vals_r("WT");
        pos__ = 0;
        size_t WT_m_mat_lim__ = G_hier;
        size_t WT_n_mat_lim__ = G;
        for (size_t n_mat__ = 0; n_mat__ < WT_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < WT_m_mat_lim__; ++m_mat__) {
                size_t WT_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < WT_limit_0__; ++i_0__) {
                    WT[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ", "matrix_d", context__.to_vec(T,P,H));
        validate_non_negative_index("ZZ", "T", T);
        validate_non_negative_index("ZZ", "P", P);
        validate_non_negative_index("ZZ", "H", H);
        ZZ = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(H)));
        vals_r__ = context__.vals_r("ZZ");
        pos__ = 0;
        size_t ZZ_m_mat_lim__ = P;
        size_t ZZ_n_mat_lim__ = H;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_m_mat_lim__; ++m_mat__) {
                size_t ZZ_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_limit_0__; ++i_0__) {
                    ZZ[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ_prior", "matrix_d", context__.to_vec(T,P,Hprior));
        validate_non_negative_index("ZZ_prior", "T", T);
        validate_non_negative_index("ZZ_prior", "P", P);
        validate_non_negative_index("ZZ_prior", "Hprior", Hprior);
        ZZ_prior = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(Hprior)));
        vals_r__ = context__.vals_r("ZZ_prior");
        pos__ = 0;
        size_t ZZ_prior_m_mat_lim__ = P;
        size_t ZZ_prior_n_mat_lim__ = Hprior;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_prior_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_prior_m_mat_lim__; ++m_mat__) {
                size_t ZZ_prior_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_prior_limit_0__; ++i_0__) {
                    ZZ_prior[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "l2_only", "matrix_d", context__.to_vec(T,Q));
        validate_non_negative_index("l2_only", "T", T);
        validate_non_negative_index("l2_only", "Q", Q);
        l2_only = matrix_d(static_cast<Eigen::VectorXd::Index>(T),static_cast<Eigen::VectorXd::Index>(Q));
        vals_r__ = context__.vals_r("l2_only");
        pos__ = 0;
        size_t l2_only_m_mat_lim__ = T;
        size_t l2_only_n_mat_lim__ = Q;
        for (size_t n_mat__ = 0; n_mat__ < l2_only_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < l2_only_m_mat_lim__; ++m_mat__) {
                l2_only(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"G_hier",G_hier,1);
        check_greater_or_equal(function__,"Q",Q,1);
        check_greater_or_equal(function__,"T",T,1);
        check_greater_or_equal(function__,"N",N,1);
        check_greater_or_equal(function__,"N_observed",N_observed,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"P",P,1);
        check_greater_or_equal(function__,"H",H,1);
        check_greater_or_equal(function__,"Hprior",Hprior,1);
        check_greater_or_equal(function__,"D",D,1);
        check_greater_or_equal(function__,"constant_item",constant_item,0);
        check_less_or_equal(function__,"constant_item",constant_item,1);
        check_greater_or_equal(function__,"separate_t",separate_t,0);
        check_less_or_equal(function__,"separate_t",separate_t,1);
        check_greater_or_equal(function__,"delta_tbar_prior_sd",delta_tbar_prior_sd,0);
        check_greater_or_equal(function__,"innov_sd_delta_scale",innov_sd_delta_scale,0);
        check_greater_or_equal(function__,"innov_sd_theta_scale",innov_sd_theta_scale,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"n_vec[k0__]",n_vec[k0__],0);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"s_vec[k0__]",s_vec[k0__],0);
        }
        check_greater_or_equal(function__,"XX",XX,0);
        check_less_or_equal(function__,"XX",XX,1);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            check_greater_or_equal(function__,"WT[k0__]",WT[k0__],0);
            check_less_or_equal(function__,"WT[k0__]",WT[k0__],1);
        }
        check_greater_or_equal(function__,"l2_only",l2_only,0);
        check_less_or_equal(function__,"l2_only",l2_only,1);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += Q * D;
        num_params_r__ += Q;
        num_params_r__ += T;
        num_params_r__ += P * T;
        num_params_r__ += T;
        num_params_r__ += H * T;
        num_params_r__ += Hprior;
        num_params_r__ += T;
        num_params_r__ += G * T;
        num_params_r__ += T;
        num_params_r__ += T;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~model_2016_09_14() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("diff_raw")))
            throw std::runtime_error("variable diff_raw missing");
        vals_r__ = context__.vals_r("diff_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "diff_raw", "vector_d", context__.to_vec(D,Q));
        // generate_declaration diff_raw
        std::vector<vector_d> diff_raw(D,vector_d(static_cast<Eigen::VectorXd::Index>(Q)));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            for (int i0__ = 0U; i0__ < D; ++i0__)
                diff_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < D; ++i0__)
            try {
            writer__.vector_unconstrain(diff_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable diff_raw: ") + e.what());
        }

        if (!(context__.contains_r("disc_raw")))
            throw std::runtime_error("variable disc_raw missing");
        vals_r__ = context__.vals_r("disc_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "disc_raw", "vector_d", context__.to_vec(Q));
        // generate_declaration disc_raw
        vector_d disc_raw(static_cast<Eigen::VectorXd::Index>(Q));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            disc_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,disc_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable disc_raw: ") + e.what());
        }

        if (!(context__.contains_r("xi")))
            throw std::runtime_error("variable xi missing");
        vals_r__ = context__.vals_r("xi");
        pos__ = 0U;
        context__.validate_dims("initialization", "xi", "vector_d", context__.to_vec(T));
        // generate_declaration xi
        vector_d xi(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            xi(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(xi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xi: ") + e.what());
        }

        if (!(context__.contains_r("gamma_raw")))
            throw std::runtime_error("variable gamma_raw missing");
        vals_r__ = context__.vals_r("gamma_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma_raw", "vector_d", context__.to_vec(T,P));
        // generate_declaration gamma_raw
        std::vector<vector_d> gamma_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(P)));
        for (int j1__ = 0U; j1__ < P; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                gamma_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(gamma_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma_raw: ") + e.what());
        }

        if (!(context__.contains_r("delta_gamma")))
            throw std::runtime_error("variable delta_gamma missing");
        vals_r__ = context__.vals_r("delta_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_gamma", "vector_d", context__.to_vec(T));
        // generate_declaration delta_gamma
        vector_d delta_gamma(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_gamma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_gamma: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo")))
            throw std::runtime_error("variable nu_geo missing");
        vals_r__ = context__.vals_r("nu_geo");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo", "vector_d", context__.to_vec(T,H));
        // generate_declaration nu_geo
        std::vector<vector_d> nu_geo(T,vector_d(static_cast<Eigen::VectorXd::Index>(H)));
        for (int j1__ = 0U; j1__ < H; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                nu_geo[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(nu_geo[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo_prior")))
            throw std::runtime_error("variable nu_geo_prior missing");
        vals_r__ = context__.vals_r("nu_geo_prior");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo_prior", "vector_d", context__.to_vec(Hprior));
        // generate_declaration nu_geo_prior
        vector_d nu_geo_prior(static_cast<Eigen::VectorXd::Index>(Hprior));
        for (int j1__ = 0U; j1__ < Hprior; ++j1__)
            nu_geo_prior(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(nu_geo_prior);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo_prior: ") + e.what());
        }

        if (!(context__.contains_r("delta_tbar")))
            throw std::runtime_error("variable delta_tbar missing");
        vals_r__ = context__.vals_r("delta_tbar");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_tbar", "vector_d", context__.to_vec(T));
        // generate_declaration delta_tbar
        vector_d delta_tbar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_tbar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_tbar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_tbar: ") + e.what());
        }

        if (!(context__.contains_r("theta_bar_raw")))
            throw std::runtime_error("variable theta_bar_raw missing");
        vals_r__ = context__.vals_r("theta_bar_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_bar_raw", "vector_d", context__.to_vec(T,G));
        // generate_declaration theta_bar_raw
        std::vector<vector_d> theta_bar_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(G)));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                theta_bar_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(theta_bar_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_bar_raw: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta_bar")))
            throw std::runtime_error("variable sd_theta_bar missing");
        vals_r__ = context__.vals_r("sd_theta_bar");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta_bar", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta_bar
        vector_d sd_theta_bar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta_bar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta_bar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta_bar: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta")))
            throw std::runtime_error("variable sd_theta missing");
        vals_r__ = context__.vals_r("sd_theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta
        vector_d sd_theta(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta: ") + e.what());
        }

        if (!(context__.contains_r("sd_gamma_geo")))
            throw std::runtime_error("variable sd_gamma_geo missing");
        vals_r__ = context__.vals_r("sd_gamma_geo");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_gamma_geo", "double", context__.to_vec());
        // generate_declaration sd_gamma_geo
        double sd_gamma_geo(0);
        sd_gamma_geo = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_gamma_geo);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_gamma_geo: ") + e.what());
        }

        if (!(context__.contains_r("sd_gamma_demo")))
            throw std::runtime_error("variable sd_gamma_demo missing");
        vals_r__ = context__.vals_r("sd_gamma_demo");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_gamma_demo", "double", context__.to_vec());
        // generate_declaration sd_gamma_demo
        double sd_gamma_demo(0);
        sd_gamma_demo = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_gamma_demo);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_gamma_demo: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_delta")))
            throw std::runtime_error("variable sd_innov_delta missing");
        vals_r__ = context__.vals_r("sd_innov_delta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_delta", "double", context__.to_vec());
        // generate_declaration sd_innov_delta
        double sd_innov_delta(0);
        sd_innov_delta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_delta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_delta: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_logsd")))
            throw std::runtime_error("variable sd_innov_logsd missing");
        vals_r__ = context__.vals_r("sd_innov_logsd");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_logsd", "double", context__.to_vec());
        // generate_declaration sd_innov_logsd
        double sd_innov_logsd(0);
        sd_innov_logsd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_logsd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_logsd: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_gamma")))
            throw std::runtime_error("variable sd_innov_gamma missing");
        vals_r__ = context__.vals_r("sd_innov_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_gamma", "double", context__.to_vec());
        // generate_declaration sd_innov_gamma
        double sd_innov_gamma(0);
        sd_innov_gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_gamma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > diff_raw;
        size_t dim_diff_raw_0__ = D;
        diff_raw.reserve(dim_diff_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_diff_raw_0__; ++k_0__) {
            if (jacobian__)
                diff_raw.push_back(in__.vector_constrain(Q,lp__));
            else
                diff_raw.push_back(in__.vector_constrain(Q));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  disc_raw;
        (void) disc_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            disc_raw = in__.vector_lb_constrain(0,Q,lp__);
        else
            disc_raw = in__.vector_lb_constrain(0,Q);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  xi;
        (void) xi;  // dummy to suppress unused var warning
        if (jacobian__)
            xi = in__.vector_constrain(T,lp__);
        else
            xi = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        gamma_raw.reserve(dim_gamma_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            if (jacobian__)
                gamma_raw.push_back(in__.vector_constrain(P,lp__));
            else
                gamma_raw.push_back(in__.vector_constrain(P));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_gamma;
        (void) delta_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_gamma = in__.vector_constrain(T,lp__);
        else
            delta_gamma = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > nu_geo;
        size_t dim_nu_geo_0__ = T;
        nu_geo.reserve(dim_nu_geo_0__);
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            if (jacobian__)
                nu_geo.push_back(in__.vector_constrain(H,lp__));
            else
                nu_geo.push_back(in__.vector_constrain(H));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  nu_geo_prior;
        (void) nu_geo_prior;  // dummy to suppress unused var warning
        if (jacobian__)
            nu_geo_prior = in__.vector_constrain(Hprior,lp__);
        else
            nu_geo_prior = in__.vector_constrain(Hprior);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_tbar;
        (void) delta_tbar;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_tbar = in__.vector_constrain(T,lp__);
        else
            delta_tbar = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        theta_bar_raw.reserve(dim_theta_bar_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            if (jacobian__)
                theta_bar_raw.push_back(in__.vector_constrain(G,lp__));
            else
                theta_bar_raw.push_back(in__.vector_constrain(G));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta_bar;
        (void) sd_theta_bar;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta_bar = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta_bar = in__.vector_lb_constrain(0,T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta;
        (void) sd_theta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta = in__.vector_lb_constrain(0,T);

        T__ sd_gamma_geo;
        (void) sd_gamma_geo;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_gamma_geo = in__.scalar_lb_constrain(0,lp__);
        else
            sd_gamma_geo = in__.scalar_lb_constrain(0);

        T__ sd_gamma_demo;
        (void) sd_gamma_demo;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_gamma_demo = in__.scalar_lb_constrain(0,lp__);
        else
            sd_gamma_demo = in__.scalar_lb_constrain(0);

        T__ sd_innov_delta;
        (void) sd_innov_delta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_delta = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_delta = in__.scalar_lb_constrain(0);

        T__ sd_innov_logsd;
        (void) sd_innov_logsd;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_logsd = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_logsd = in__.scalar_lb_constrain(0);

        T__ sd_innov_gamma;
        (void) sd_innov_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_gamma = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_gamma = in__.scalar_lb_constrain(0);


        // transformed parameters
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, DUMMY_VAR__);
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > diff(D, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(diff, DUMMY_VAR__);
        stan::math::fill(diff,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > kappa(D, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(kappa, DUMMY_VAR__);
        stan::math::fill(kappa,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  disc(static_cast<Eigen::VectorXd::Index>(Q));
        (void) disc;  // dummy to suppress unused var warning
        stan::math::initialize(disc, DUMMY_VAR__);
        stan::math::fill(disc,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) sd_item;  // dummy to suppress unused var warning
        stan::math::initialize(sd_item, DUMMY_VAR__);
        stan::math::fill(sd_item,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  var_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) var_item;  // dummy to suppress unused var warning
        stan::math::initialize(var_item, DUMMY_VAR__);
        stan::math::fill(var_item,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  var_theta(static_cast<Eigen::VectorXd::Index>(T));
        (void) var_theta;  // dummy to suppress unused var warning
        stan::math::initialize(var_theta, DUMMY_VAR__);
        stan::math::fill(var_theta,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > var_theta_bar_l2(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(var_theta_bar_l2, DUMMY_VAR__);
        stan::math::fill(var_theta_bar_l2,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, DUMMY_VAR__);
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, DUMMY_VAR__);
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > z(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > z_l2(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(z_l2, DUMMY_VAR__);
        stan::math::fill(z_l2,DUMMY_VAR__);
        vector<vector<vector<T__> > > prob(T, (vector<vector<T__> >(Q, (vector<T__>(G)))));
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > prob_l2(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(prob_l2, DUMMY_VAR__);
        stan::math::fill(prob_l2,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_l2(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(theta_l2, DUMMY_VAR__);
        stan::math::fill(theta_l2,DUMMY_VAR__);


        try {
            current_statement_begin__ = 73;
            stan::math::assign(disc, multiply(disc_raw,pow(exp(sum(log(disc_raw))),-(inv(Q)))));
            current_statement_begin__ = 74;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 75;
                stan::math::assign(get_base1_lhs(sd_item,q,"sd_item",1), inv(get_base1(disc,q,"disc",1)));
            }
            current_statement_begin__ = 77;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 79;
                stan::math::assign(get_base1_lhs(diff,d,"diff",1), subtract(get_base1(diff_raw,d,"diff_raw",1),mean(get_base1(diff_raw,1,"diff_raw",1))));
                current_statement_begin__ = 80;
                stan::math::assign(get_base1_lhs(kappa,d,"kappa",1), elt_divide(get_base1(diff,d,"diff",1),disc));
            }
            current_statement_begin__ = 82;
            stan::math::assign(var_item, elt_multiply(sd_item,sd_item));
            current_statement_begin__ = 83;
            stan::math::assign(var_theta, elt_multiply(sd_theta,sd_theta));
            current_statement_begin__ = 84;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 85;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 86;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 87;
                    for (int p = 1; p <= P; ++p) {

                        current_statement_begin__ = 88;
                        if (as_bool(logical_lte(p,S))) {

                            current_statement_begin__ = 89;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                        current_statement_begin__ = 91;
                        if (as_bool(logical_gt(p,S))) {

                            current_statement_begin__ = 92;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                    }
                    current_statement_begin__ = 95;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 98;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 99;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 107;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 108;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 109;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 110;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                            current_statement_begin__ = 112;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 113;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                        }
                    } else {

                        current_statement_begin__ = 119;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 120;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 121;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), ((get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2) * get_base1(delta_gamma,t,"delta_gamma",1)) + multiply(get_base1(get_base1(ZZ,t,"ZZ",1),p,"ZZ",2),get_base1(nu_geo,t,"nu_geo",1))));
                            }
                            current_statement_begin__ = 123;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 124;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2));
                            }
                        }
                        current_statement_begin__ = 127;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 129;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 133;
                stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                current_statement_begin__ = 135;
                stan::math::assign(get_base1_lhs(theta_l2,t,"theta_l2",1), multiply(get_base1(WT,t,"WT",1),get_base1(theta_bar,t,"theta_bar",1)));
                current_statement_begin__ = 136;
                for (int n = 1; n <= G_hier; ++n) {
                    {
                        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  WTdiag(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(G));
                        (void) WTdiag;  // dummy to suppress unused var warning
                        stan::math::initialize(WTdiag, DUMMY_VAR__);
                        stan::math::fill(WTdiag,DUMMY_VAR__);


                        current_statement_begin__ = 138;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 139;
                            for (int h = 1; h <= G; ++h) {

                                current_statement_begin__ = 140;
                                if (as_bool(logical_eq(g,h))) {

                                    current_statement_begin__ = 141;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), get_base1(get_base1(WT,t,"WT",1),n,g,"WT",2));
                                }
                                current_statement_begin__ = 143;
                                if (as_bool(logical_neq(g,h))) {

                                    current_statement_begin__ = 144;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), 0);
                                }
                            }
                        }
                        current_statement_begin__ = 149;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2), multiply(multiply(transpose(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))),WTdiag),subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))));
                    }
                }
                current_statement_begin__ = 152;
                for (int q = 1; q <= Q; ++q) {
                    {
                        T__ sd_tq;
                        (void) sd_tq;  // dummy to suppress unused var warning
                        stan::math::initialize(sd_tq, DUMMY_VAR__);
                        stan::math::fill(sd_tq,DUMMY_VAR__);
                        vector<T__> sd_l2_tq(G_hier);
                        stan::math::initialize(sd_l2_tq, DUMMY_VAR__);
                        stan::math::fill(sd_l2_tq,DUMMY_VAR__);


                        current_statement_begin__ = 155;
                        stan::math::assign(sd_tq, sqrt((get_base1(var_theta,t,"var_theta",1) + get_base1(var_item,q,"var_item",1))));
                        current_statement_begin__ = 156;
                        for (int n = 1; n <= G_hier; ++n) {

                            current_statement_begin__ = 157;
                            stan::math::assign(get_base1_lhs(sd_l2_tq,n,"sd_l2_tq",1), sqrt((square(sd_tq) + get_base1(get_base1(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2))));
                        }
                        current_statement_begin__ = 160;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 161;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 162;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 163;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 165;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 168;
                        if (as_bool(logical_eq(constant_item,1))) {

                            current_statement_begin__ = 169;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 170;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 171;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 173;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 176;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 177;
                            if (as_bool(logical_eq(Q,1))) {

                                current_statement_begin__ = 179;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(theta_bar,t,"theta_bar",1),g,"theta_bar",2)));
                            }
                            current_statement_begin__ = 181;
                            if (as_bool(logical_gt(Q,1))) {

                                current_statement_begin__ = 183;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                            }
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < D; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                if (stan::math::is_uninitialized(diff[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: diff" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < D; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                if (stan::math::is_uninitialized(kappa[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: kappa" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(disc(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: disc" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(sd_item(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sd_item" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(var_item(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: var_item" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            if (stan::math::is_uninitialized(var_theta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: var_theta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G_hier; ++i1__) {
                if (stan::math::is_uninitialized(var_theta_bar_l2[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: var_theta_bar_l2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(mu_theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(mu_gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(z[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G_hier; ++i2__) {
                    if (stan::math::is_uninitialized(z_l2[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z_l2" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(prob[i0__][i1__][i2__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prob" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G_hier; ++i2__) {
                    if (stan::math::is_uninitialized(prob_l2[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prob_l2" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G_hier; ++i1__) {
                if (stan::math::is_uninitialized(theta_l2[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_l2" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"disc",disc,0);
        check_greater_or_equal(function__,"sd_item",sd_item,0);
        check_greater_or_equal(function__,"var_item",var_item,0);
        check_greater_or_equal(function__,"var_theta",var_theta,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // model body
        try {
            {
                vector<T__> prob_vec(N);
                stan::math::initialize(prob_vec, DUMMY_VAR__);
                stan::math::fill(prob_vec,DUMMY_VAR__);
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning
                stan::math::fill(pos, std::numeric_limits<int>::min());


                current_statement_begin__ = 194;
                stan::math::assign(pos, 0);
                current_statement_begin__ = 197;
                if (as_bool(logical_eq(constant_item,1))) {

                    current_statement_begin__ = 198;
                    lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,1,"diff_raw",1), 0, 1));
                }
                current_statement_begin__ = 200;
                lp_accum__.add(lognormal_log<propto__>(disc_raw, 0, 1));
                current_statement_begin__ = 201;
                lp_accum__.add(cauchy_log<propto__>(sd_gamma_geo, 0, 2.5));
                current_statement_begin__ = 202;
                lp_accum__.add(cauchy_log<propto__>(sd_gamma_demo, 0, 2.5));
                current_statement_begin__ = 203;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_delta, 0, innov_sd_delta_scale));
                current_statement_begin__ = 204;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_gamma, 0, 2.5));
                current_statement_begin__ = 205;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_logsd, 0, innov_sd_theta_scale));
                current_statement_begin__ = 207;
                for (int t = 1; t <= T; ++t) {

                    current_statement_begin__ = 208;
                    lp_accum__.add(normal_log<propto__>(get_base1(gamma_raw,t,"gamma_raw",1), 0, 1));
                    current_statement_begin__ = 209;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta_bar_raw,t,"theta_bar_raw",1), 0, 1));
                    current_statement_begin__ = 210;
                    if (as_bool(logical_eq(t,1))) {

                        current_statement_begin__ = 211;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 212;
                            lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,t,"diff_raw",1), 0, 1));
                        }
                        current_statement_begin__ = 215;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), 0, 2.5));
                        current_statement_begin__ = 216;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta,t,"sd_theta",1), 0, 2.5));
                        current_statement_begin__ = 217;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), 0, 10));
                        current_statement_begin__ = 218;
                        lp_accum__.add(normal_log<propto__>(nu_geo_prior, 0, 10));
                        current_statement_begin__ = 219;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), 0.5, 0.5));
                        current_statement_begin__ = 220;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), delta_tbar_prior_mean, delta_tbar_prior_sd));
                        current_statement_begin__ = 221;
                        lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                    }
                    current_statement_begin__ = 223;
                    if (as_bool(logical_gt(t,1))) {

                        current_statement_begin__ = 227;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 228;
                            lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,t,"diff_raw",1), get_base1(diff_raw,(t - 1),"diff_raw",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 232;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), get_base1(delta_gamma,(t - 1),"delta_gamma",1), sd_innov_delta));
                        current_statement_begin__ = 233;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), get_base1(nu_geo,(t - 1),"nu_geo",1), sd_innov_delta));
                        current_statement_begin__ = 234;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), get_base1(delta_tbar,(t - 1),"delta_tbar",1), sd_innov_delta));
                        current_statement_begin__ = 235;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), log(get_base1(sd_theta_bar,(t - 1),"sd_theta_bar",1)), sd_innov_logsd));
                        current_statement_begin__ = 236;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta,t,"sd_theta",1), log(get_base1(sd_theta,(t - 1),"sd_theta",1)), sd_innov_logsd));
                        current_statement_begin__ = 237;
                        if (as_bool((primitive_value(logical_eq(separate_t,0)) && primitive_value(logical_gt(t,2))))) {

                            current_statement_begin__ = 238;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), get_base1(xi,(t - 1),"xi",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 240;
                        if (as_bool((primitive_value(logical_eq(separate_t,1)) || primitive_value(logical_eq(t,2))))) {

                            current_statement_begin__ = 241;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                        }
                    }
                    current_statement_begin__ = 245;
                    for (int q = 1; q <= Q; ++q) {

                        current_statement_begin__ = 251;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 252;
                            stan::math::assign(pos, (pos + 1));
                            current_statement_begin__ = 253;
                            stan::math::assign(get_base1_lhs(prob_vec,pos,"prob_vec",1), get_base1(get_base1(get_base1(prob,t,"prob",1),q,"prob",2),g,"prob",3));
                        }
                    }
                }
                current_statement_begin__ = 260;
                lp_accum__.add(binomial_log<propto__>(stan::model::rvalue(s_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "s_vec"), stan::model::rvalue(n_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "n_vec"), stan::model::rvalue(prob_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "prob_vec")));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("diff_raw");
        names__.push_back("disc_raw");
        names__.push_back("xi");
        names__.push_back("gamma_raw");
        names__.push_back("delta_gamma");
        names__.push_back("nu_geo");
        names__.push_back("nu_geo_prior");
        names__.push_back("delta_tbar");
        names__.push_back("theta_bar_raw");
        names__.push_back("sd_theta_bar");
        names__.push_back("sd_theta");
        names__.push_back("sd_gamma_geo");
        names__.push_back("sd_gamma_demo");
        names__.push_back("sd_innov_delta");
        names__.push_back("sd_innov_logsd");
        names__.push_back("sd_innov_gamma");
        names__.push_back("theta_bar");
        names__.push_back("diff");
        names__.push_back("kappa");
        names__.push_back("disc");
        names__.push_back("sd_item");
        names__.push_back("var_item");
        names__.push_back("var_theta");
        names__.push_back("var_theta_bar_l2");
        names__.push_back("gamma");
        names__.push_back("mu_theta_bar");
        names__.push_back("mu_gamma");
        names__.push_back("z");
        names__.push_back("z_l2");
        names__.push_back("prob");
        names__.push_back("prob_l2");
        names__.push_back("theta_l2");
        names__.push_back("sd_total");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Hprior);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G_hier);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_2016_09_14_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<vector_d> diff_raw;
        size_t dim_diff_raw_0__ = D;
        for (size_t k_0__ = 0; k_0__ < dim_diff_raw_0__; ++k_0__) {
            diff_raw.push_back(in__.vector_constrain(Q));
        }
        vector_d disc_raw = in__.vector_lb_constrain(0,Q);
        vector_d xi = in__.vector_constrain(T);
        vector<vector_d> gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            gamma_raw.push_back(in__.vector_constrain(P));
        }
        vector_d delta_gamma = in__.vector_constrain(T);
        vector<vector_d> nu_geo;
        size_t dim_nu_geo_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            nu_geo.push_back(in__.vector_constrain(H));
        }
        vector_d nu_geo_prior = in__.vector_constrain(Hprior);
        vector_d delta_tbar = in__.vector_constrain(T);
        vector<vector_d> theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            theta_bar_raw.push_back(in__.vector_constrain(G));
        }
        vector_d sd_theta_bar = in__.vector_lb_constrain(0,T);
        vector_d sd_theta = in__.vector_lb_constrain(0,T);
        double sd_gamma_geo = in__.scalar_lb_constrain(0);
        double sd_gamma_demo = in__.scalar_lb_constrain(0);
        double sd_innov_delta = in__.scalar_lb_constrain(0);
        double sd_innov_logsd = in__.scalar_lb_constrain(0);
        double sd_innov_gamma = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(diff_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(disc_raw[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(xi[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_gamma[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < H; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(nu_geo[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Hprior; ++k_0__) {
            vars__.push_back(nu_geo_prior[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_tbar[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta_bar[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta[k_0__]);
        }
        vars__.push_back(sd_gamma_geo);
        vars__.push_back(sd_gamma_demo);
        vars__.push_back(sd_innov_delta);
        vars__.push_back(sd_innov_logsd);
        vars__.push_back(sd_innov_gamma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector<vector_d> theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<vector_d> diff(D, (vector_d(static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(diff, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(diff,DUMMY_VAR__);
        vector<vector_d> kappa(D, (vector_d(static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(kappa, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(kappa,DUMMY_VAR__);
        vector_d disc(static_cast<Eigen::VectorXd::Index>(Q));
        (void) disc;  // dummy to suppress unused var warning
        stan::math::initialize(disc, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(disc,DUMMY_VAR__);
        vector_d sd_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) sd_item;  // dummy to suppress unused var warning
        stan::math::initialize(sd_item, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sd_item,DUMMY_VAR__);
        vector_d var_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) var_item;  // dummy to suppress unused var warning
        stan::math::initialize(var_item, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_item,DUMMY_VAR__);
        vector_d var_theta(static_cast<Eigen::VectorXd::Index>(T));
        (void) var_theta;  // dummy to suppress unused var warning
        stan::math::initialize(var_theta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_theta,DUMMY_VAR__);
        vector<vector_d> var_theta_bar_l2(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(var_theta_bar_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_theta_bar_l2,DUMMY_VAR__);
        vector<vector_d> gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<vector_d> mu_theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<vector_d> mu_gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<vector_d> > z(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<vector_d> > z_l2(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(z_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z_l2,DUMMY_VAR__);
        vector<vector<vector<double> > > prob(T, (vector<vector<double> >(Q, (vector<double>(G, 0.0)))));
        stan::math::initialize(prob, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prob,DUMMY_VAR__);
        vector<vector<vector_d> > prob_l2(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))))));
        stan::math::initialize(prob_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prob_l2,DUMMY_VAR__);
        vector<vector_d> theta_l2(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G_hier))));
        stan::math::initialize(theta_l2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta_l2,DUMMY_VAR__);


        try {
            current_statement_begin__ = 73;
            stan::math::assign(disc, multiply(disc_raw,pow(exp(sum(log(disc_raw))),-(inv(Q)))));
            current_statement_begin__ = 74;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 75;
                stan::math::assign(get_base1_lhs(sd_item,q,"sd_item",1), inv(get_base1(disc,q,"disc",1)));
            }
            current_statement_begin__ = 77;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 79;
                stan::math::assign(get_base1_lhs(diff,d,"diff",1), subtract(get_base1(diff_raw,d,"diff_raw",1),mean(get_base1(diff_raw,1,"diff_raw",1))));
                current_statement_begin__ = 80;
                stan::math::assign(get_base1_lhs(kappa,d,"kappa",1), elt_divide(get_base1(diff,d,"diff",1),disc));
            }
            current_statement_begin__ = 82;
            stan::math::assign(var_item, elt_multiply(sd_item,sd_item));
            current_statement_begin__ = 83;
            stan::math::assign(var_theta, elt_multiply(sd_theta,sd_theta));
            current_statement_begin__ = 84;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 85;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 86;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 87;
                    for (int p = 1; p <= P; ++p) {

                        current_statement_begin__ = 88;
                        if (as_bool(logical_lte(p,S))) {

                            current_statement_begin__ = 89;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                        current_statement_begin__ = 91;
                        if (as_bool(logical_gt(p,S))) {

                            current_statement_begin__ = 92;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                    }
                    current_statement_begin__ = 95;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 98;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 99;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 107;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 108;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 109;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 110;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                            current_statement_begin__ = 112;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 113;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                        }
                    } else {

                        current_statement_begin__ = 119;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 120;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 121;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), ((get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2) * get_base1(delta_gamma,t,"delta_gamma",1)) + multiply(get_base1(get_base1(ZZ,t,"ZZ",1),p,"ZZ",2),get_base1(nu_geo,t,"nu_geo",1))));
                            }
                            current_statement_begin__ = 123;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 124;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2));
                            }
                        }
                        current_statement_begin__ = 127;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 129;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 133;
                stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                current_statement_begin__ = 135;
                stan::math::assign(get_base1_lhs(theta_l2,t,"theta_l2",1), multiply(get_base1(WT,t,"WT",1),get_base1(theta_bar,t,"theta_bar",1)));
                current_statement_begin__ = 136;
                for (int n = 1; n <= G_hier; ++n) {
                    {
                        matrix_d WTdiag(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(G));
                        (void) WTdiag;  // dummy to suppress unused var warning
                        stan::math::initialize(WTdiag, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(WTdiag,DUMMY_VAR__);


                        current_statement_begin__ = 138;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 139;
                            for (int h = 1; h <= G; ++h) {

                                current_statement_begin__ = 140;
                                if (as_bool(logical_eq(g,h))) {

                                    current_statement_begin__ = 141;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), get_base1(get_base1(WT,t,"WT",1),n,g,"WT",2));
                                }
                                current_statement_begin__ = 143;
                                if (as_bool(logical_neq(g,h))) {

                                    current_statement_begin__ = 144;
                                    stan::math::assign(get_base1_lhs(WTdiag,g,h,"WTdiag",1), 0);
                                }
                            }
                        }
                        current_statement_begin__ = 149;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2), multiply(multiply(transpose(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))),WTdiag),subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2))));
                    }
                }
                current_statement_begin__ = 152;
                for (int q = 1; q <= Q; ++q) {
                    {
                        double sd_tq(0.0);
                        (void) sd_tq;  // dummy to suppress unused var warning
                        stan::math::initialize(sd_tq, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(sd_tq,DUMMY_VAR__);
                        vector<double> sd_l2_tq(G_hier, 0.0);
                        stan::math::initialize(sd_l2_tq, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(sd_l2_tq,DUMMY_VAR__);


                        current_statement_begin__ = 155;
                        stan::math::assign(sd_tq, sqrt((get_base1(var_theta,t,"var_theta",1) + get_base1(var_item,q,"var_item",1))));
                        current_statement_begin__ = 156;
                        for (int n = 1; n <= G_hier; ++n) {

                            current_statement_begin__ = 157;
                            stan::math::assign(get_base1_lhs(sd_l2_tq,n,"sd_l2_tq",1), sqrt((square(sd_tq) + get_base1(get_base1(var_theta_bar_l2,t,"var_theta_bar_l2",1),n,"var_theta_bar_l2",2))));
                        }
                        current_statement_begin__ = 160;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 161;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 162;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 163;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 165;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 168;
                        if (as_bool(logical_eq(constant_item,1))) {

                            current_statement_begin__ = 169;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)),sd_tq));
                            current_statement_begin__ = 170;
                            for (int n = 1; n <= G_hier; ++n) {

                                current_statement_begin__ = 171;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3), ((get_base1(get_base1(theta_l2,t,"theta_l2",1),n,"theta_l2",2) - get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)) / get_base1(sd_l2_tq,n,"sd_l2_tq",1)));
                                current_statement_begin__ = 173;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob_l2,t,"prob_l2",1),q,"prob_l2",2),n,"prob_l2",3), Phi_approx(get_base1(get_base1(get_base1(z_l2,t,"z_l2",1),q,"z_l2",2),n,"z_l2",3)));
                            }
                        }
                        current_statement_begin__ = 176;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 177;
                            if (as_bool(logical_eq(Q,1))) {

                                current_statement_begin__ = 179;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(theta_bar,t,"theta_bar",1),g,"theta_bar",2)));
                            }
                            current_statement_begin__ = 181;
                            if (as_bool(logical_gt(Q,1))) {

                                current_statement_begin__ = 183;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                            }
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"disc",disc,0);
        check_greater_or_equal(function__,"sd_item",sd_item,0);
        check_greater_or_equal(function__,"var_item",var_item,0);
        check_greater_or_equal(function__,"var_theta",var_theta,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(diff[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(kappa[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(disc[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(sd_item[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(var_item[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(var_theta[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < G_hier; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(var_theta_bar_l2[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_gamma[k_0__][k_1__]);
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(z[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G_hier; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(z_l2[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(prob[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G_hier; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(prob_l2[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_1__ = 0; k_1__ < G_hier; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_l2[k_0__][k_1__]);
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d sd_total(static_cast<Eigen::VectorXd::Index>(T));
        (void) sd_total;  // dummy to suppress unused var warning
        stan::math::initialize(sd_total, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sd_total,DUMMY_VAR__);


        try {
            current_statement_begin__ = 265;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 266;
                stan::math::assign(get_base1_lhs(sd_total,t,"sd_total",1), sqrt((variance(get_base1(theta_bar,t,"theta_bar",1)) + square(get_base1(sd_theta,t,"sd_theta",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"sd_total",sd_total,0);

        // write generated quantities
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_total[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_2016_09_14";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_geo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_demo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kappa" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "var_theta_bar_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_total" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_geo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_demo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kappa" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "var_theta_bar_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G_hier; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob_l2" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_1__ = 1; k_1__ <= G_hier; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_l2" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_total" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace




// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_2017_01_04_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_2017_01_04 : public prob_grad {
private:
    int G;
    int G_hier;
    int Q;
    int T;
    int N;
    int N_observed;
    int S;
    int P;
    int H;
    int Hprior;
    int D;
    int constant_item;
    int separate_t;
    int hierarchical_model;
    double delta_tbar_prior_mean;
    double delta_tbar_prior_sd;
    double innov_sd_delta_scale;
    double innov_sd_theta_scale;
    vector<int> n_vec;
    vector<int> s_vec;
    vector<int> observed;
    vector<vector<vector<int> > > NNl2;
    vector<vector<vector<int> > > SSl2;
    matrix_d XX;
    vector<matrix_d> WT;
    vector<matrix_d> ZZ;
    vector<matrix_d> ZZ_prior;
    matrix_d l2_only;
public:
    model_2017_01_04(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_2017_01_04(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_2017_01_04_namespace::model_2017_01_04";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G_hier", "int", context__.to_vec());
        G_hier = int(0);
        vals_i__ = context__.vals_i("G_hier");
        pos__ = 0;
        G_hier = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
        Q = int(0);
        vals_i__ = context__.vals_i("Q");
        pos__ = 0;
        Q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "T", "int", context__.to_vec());
        T = int(0);
        vals_i__ = context__.vals_i("T");
        pos__ = 0;
        T = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_observed", "int", context__.to_vec());
        N_observed = int(0);
        vals_i__ = context__.vals_i("N_observed");
        pos__ = 0;
        N_observed = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "P", "int", context__.to_vec());
        P = int(0);
        vals_i__ = context__.vals_i("P");
        pos__ = 0;
        P = vals_i__[pos__++];
        context__.validate_dims("data initialization", "H", "int", context__.to_vec());
        H = int(0);
        vals_i__ = context__.vals_i("H");
        pos__ = 0;
        H = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Hprior", "int", context__.to_vec());
        Hprior = int(0);
        vals_i__ = context__.vals_i("Hprior");
        pos__ = 0;
        Hprior = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "constant_item", "int", context__.to_vec());
        constant_item = int(0);
        vals_i__ = context__.vals_i("constant_item");
        pos__ = 0;
        constant_item = vals_i__[pos__++];
        context__.validate_dims("data initialization", "separate_t", "int", context__.to_vec());
        separate_t = int(0);
        vals_i__ = context__.vals_i("separate_t");
        pos__ = 0;
        separate_t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "hierarchical_model", "int", context__.to_vec());
        hierarchical_model = int(0);
        vals_i__ = context__.vals_i("hierarchical_model");
        pos__ = 0;
        hierarchical_model = vals_i__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_mean", "double", context__.to_vec());
        delta_tbar_prior_mean = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_mean");
        pos__ = 0;
        delta_tbar_prior_mean = vals_r__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_sd", "double", context__.to_vec());
        delta_tbar_prior_sd = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_sd");
        pos__ = 0;
        delta_tbar_prior_sd = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_delta_scale", "double", context__.to_vec());
        innov_sd_delta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_delta_scale");
        pos__ = 0;
        innov_sd_delta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_theta_scale", "double", context__.to_vec());
        innov_sd_theta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_theta_scale");
        pos__ = 0;
        innov_sd_theta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "n_vec", "int", context__.to_vec(N));
        validate_non_negative_index("n_vec", "N", N);
        n_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("n_vec");
        pos__ = 0;
        size_t n_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < n_vec_limit_0__; ++i_0__) {
            n_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "s_vec", "int", context__.to_vec(N));
        validate_non_negative_index("s_vec", "N", N);
        s_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("s_vec");
        pos__ = 0;
        size_t s_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < s_vec_limit_0__; ++i_0__) {
            s_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "observed", "int", context__.to_vec(N_observed));
        validate_non_negative_index("observed", "N_observed", N_observed);
        observed = std::vector<int>(N_observed,int(0));
        vals_i__ = context__.vals_i("observed");
        pos__ = 0;
        size_t observed_limit_0__ = N_observed;
        for (size_t i_0__ = 0; i_0__ < observed_limit_0__; ++i_0__) {
            observed[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "NNl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("NNl2", "T", T);
        validate_non_negative_index("NNl2", "Q", Q);
        validate_non_negative_index("NNl2", "G_hier", G_hier);
        NNl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("NNl2");
        pos__ = 0;
        size_t NNl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < NNl2_limit_2__; ++i_2__) {
            size_t NNl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < NNl2_limit_1__; ++i_1__) {
                size_t NNl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < NNl2_limit_0__; ++i_0__) {
                    NNl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "SSl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("SSl2", "T", T);
        validate_non_negative_index("SSl2", "Q", Q);
        validate_non_negative_index("SSl2", "G_hier", G_hier);
        SSl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("SSl2");
        pos__ = 0;
        size_t SSl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < SSl2_limit_2__; ++i_2__) {
            size_t SSl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < SSl2_limit_1__; ++i_1__) {
                size_t SSl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < SSl2_limit_0__; ++i_0__) {
                    SSl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "XX", "matrix_d", context__.to_vec(G,P));
        validate_non_negative_index("XX", "G", G);
        validate_non_negative_index("XX", "P", P);
        XX = matrix_d(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(P));
        vals_r__ = context__.vals_r("XX");
        pos__ = 0;
        size_t XX_m_mat_lim__ = G;
        size_t XX_n_mat_lim__ = P;
        for (size_t n_mat__ = 0; n_mat__ < XX_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < XX_m_mat_lim__; ++m_mat__) {
                XX(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "WT", "matrix_d", context__.to_vec(T,G_hier,G));
        validate_non_negative_index("WT", "T", T);
        validate_non_negative_index("WT", "G_hier", G_hier);
        validate_non_negative_index("WT", "G", G);
        WT = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(G_hier),static_cast<Eigen::VectorXd::Index>(G)));
        vals_r__ = context__.vals_r("WT");
        pos__ = 0;
        size_t WT_m_mat_lim__ = G_hier;
        size_t WT_n_mat_lim__ = G;
        for (size_t n_mat__ = 0; n_mat__ < WT_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < WT_m_mat_lim__; ++m_mat__) {
                size_t WT_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < WT_limit_0__; ++i_0__) {
                    WT[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ", "matrix_d", context__.to_vec(T,P,H));
        validate_non_negative_index("ZZ", "T", T);
        validate_non_negative_index("ZZ", "P", P);
        validate_non_negative_index("ZZ", "H", H);
        ZZ = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(H)));
        vals_r__ = context__.vals_r("ZZ");
        pos__ = 0;
        size_t ZZ_m_mat_lim__ = P;
        size_t ZZ_n_mat_lim__ = H;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_m_mat_lim__; ++m_mat__) {
                size_t ZZ_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_limit_0__; ++i_0__) {
                    ZZ[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ_prior", "matrix_d", context__.to_vec(T,P,Hprior));
        validate_non_negative_index("ZZ_prior", "T", T);
        validate_non_negative_index("ZZ_prior", "P", P);
        validate_non_negative_index("ZZ_prior", "Hprior", Hprior);
        ZZ_prior = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(Hprior)));
        vals_r__ = context__.vals_r("ZZ_prior");
        pos__ = 0;
        size_t ZZ_prior_m_mat_lim__ = P;
        size_t ZZ_prior_n_mat_lim__ = Hprior;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_prior_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_prior_m_mat_lim__; ++m_mat__) {
                size_t ZZ_prior_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_prior_limit_0__; ++i_0__) {
                    ZZ_prior[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "l2_only", "matrix_d", context__.to_vec(T,Q));
        validate_non_negative_index("l2_only", "T", T);
        validate_non_negative_index("l2_only", "Q", Q);
        l2_only = matrix_d(static_cast<Eigen::VectorXd::Index>(T),static_cast<Eigen::VectorXd::Index>(Q));
        vals_r__ = context__.vals_r("l2_only");
        pos__ = 0;
        size_t l2_only_m_mat_lim__ = T;
        size_t l2_only_n_mat_lim__ = Q;
        for (size_t n_mat__ = 0; n_mat__ < l2_only_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < l2_only_m_mat_lim__; ++m_mat__) {
                l2_only(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"G_hier",G_hier,1);
        check_greater_or_equal(function__,"Q",Q,1);
        check_greater_or_equal(function__,"T",T,1);
        check_greater_or_equal(function__,"N",N,1);
        check_greater_or_equal(function__,"N_observed",N_observed,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"P",P,1);
        check_greater_or_equal(function__,"H",H,1);
        check_greater_or_equal(function__,"Hprior",Hprior,1);
        check_greater_or_equal(function__,"D",D,1);
        check_greater_or_equal(function__,"constant_item",constant_item,0);
        check_less_or_equal(function__,"constant_item",constant_item,1);
        check_greater_or_equal(function__,"separate_t",separate_t,0);
        check_less_or_equal(function__,"separate_t",separate_t,1);
        check_greater_or_equal(function__,"hierarchical_model",hierarchical_model,0);
        check_less_or_equal(function__,"hierarchical_model",hierarchical_model,1);
        check_greater_or_equal(function__,"delta_tbar_prior_sd",delta_tbar_prior_sd,0);
        check_greater_or_equal(function__,"innov_sd_delta_scale",innov_sd_delta_scale,0);
        check_greater_or_equal(function__,"innov_sd_theta_scale",innov_sd_theta_scale,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"n_vec[k0__]",n_vec[k0__],0);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"s_vec[k0__]",s_vec[k0__],0);
        }
        check_greater_or_equal(function__,"XX",XX,0);
        check_less_or_equal(function__,"XX",XX,1);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            check_greater_or_equal(function__,"WT[k0__]",WT[k0__],0);
            check_less_or_equal(function__,"WT[k0__]",WT[k0__],1);
        }
        check_greater_or_equal(function__,"l2_only",l2_only,0);
        check_less_or_equal(function__,"l2_only",l2_only,1);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += Q * D;
        num_params_r__ += Q;
        num_params_r__ += T;
        num_params_r__ += P * T;
        num_params_r__ += T;
        num_params_r__ += H * T;
        num_params_r__ += Hprior;
        num_params_r__ += T;
        num_params_r__ += G * T;
        num_params_r__ += T;
        num_params_r__ += T;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~model_2017_01_04() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("diff_raw")))
            throw std::runtime_error("variable diff_raw missing");
        vals_r__ = context__.vals_r("diff_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "diff_raw", "vector_d", context__.to_vec(D,Q));
        // generate_declaration diff_raw
        std::vector<vector_d> diff_raw(D,vector_d(static_cast<Eigen::VectorXd::Index>(Q)));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            for (int i0__ = 0U; i0__ < D; ++i0__)
                diff_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < D; ++i0__)
            try {
            writer__.vector_unconstrain(diff_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable diff_raw: ") + e.what());
        }

        if (!(context__.contains_r("disc_raw")))
            throw std::runtime_error("variable disc_raw missing");
        vals_r__ = context__.vals_r("disc_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "disc_raw", "vector_d", context__.to_vec(Q));
        // generate_declaration disc_raw
        vector_d disc_raw(static_cast<Eigen::VectorXd::Index>(Q));
        for (int j1__ = 0U; j1__ < Q; ++j1__)
            disc_raw(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,disc_raw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable disc_raw: ") + e.what());
        }

        if (!(context__.contains_r("xi")))
            throw std::runtime_error("variable xi missing");
        vals_r__ = context__.vals_r("xi");
        pos__ = 0U;
        context__.validate_dims("initialization", "xi", "vector_d", context__.to_vec(T));
        // generate_declaration xi
        vector_d xi(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            xi(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(xi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xi: ") + e.what());
        }

        if (!(context__.contains_r("gamma_raw")))
            throw std::runtime_error("variable gamma_raw missing");
        vals_r__ = context__.vals_r("gamma_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma_raw", "vector_d", context__.to_vec(T,P));
        // generate_declaration gamma_raw
        std::vector<vector_d> gamma_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(P)));
        for (int j1__ = 0U; j1__ < P; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                gamma_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(gamma_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma_raw: ") + e.what());
        }

        if (!(context__.contains_r("delta_gamma")))
            throw std::runtime_error("variable delta_gamma missing");
        vals_r__ = context__.vals_r("delta_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_gamma", "vector_d", context__.to_vec(T));
        // generate_declaration delta_gamma
        vector_d delta_gamma(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_gamma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_gamma: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo")))
            throw std::runtime_error("variable nu_geo missing");
        vals_r__ = context__.vals_r("nu_geo");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo", "vector_d", context__.to_vec(T,H));
        // generate_declaration nu_geo
        std::vector<vector_d> nu_geo(T,vector_d(static_cast<Eigen::VectorXd::Index>(H)));
        for (int j1__ = 0U; j1__ < H; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                nu_geo[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(nu_geo[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo_prior")))
            throw std::runtime_error("variable nu_geo_prior missing");
        vals_r__ = context__.vals_r("nu_geo_prior");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo_prior", "vector_d", context__.to_vec(Hprior));
        // generate_declaration nu_geo_prior
        vector_d nu_geo_prior(static_cast<Eigen::VectorXd::Index>(Hprior));
        for (int j1__ = 0U; j1__ < Hprior; ++j1__)
            nu_geo_prior(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(nu_geo_prior);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo_prior: ") + e.what());
        }

        if (!(context__.contains_r("delta_tbar")))
            throw std::runtime_error("variable delta_tbar missing");
        vals_r__ = context__.vals_r("delta_tbar");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_tbar", "vector_d", context__.to_vec(T));
        // generate_declaration delta_tbar
        vector_d delta_tbar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_tbar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_tbar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_tbar: ") + e.what());
        }

        if (!(context__.contains_r("theta_bar_raw")))
            throw std::runtime_error("variable theta_bar_raw missing");
        vals_r__ = context__.vals_r("theta_bar_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_bar_raw", "vector_d", context__.to_vec(T,G));
        // generate_declaration theta_bar_raw
        std::vector<vector_d> theta_bar_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(G)));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                theta_bar_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(theta_bar_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_bar_raw: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta_bar")))
            throw std::runtime_error("variable sd_theta_bar missing");
        vals_r__ = context__.vals_r("sd_theta_bar");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta_bar", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta_bar
        vector_d sd_theta_bar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta_bar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta_bar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta_bar: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta")))
            throw std::runtime_error("variable sd_theta missing");
        vals_r__ = context__.vals_r("sd_theta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta
        vector_d sd_theta(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta: ") + e.what());
        }

        if (!(context__.contains_r("sd_gamma_geo")))
            throw std::runtime_error("variable sd_gamma_geo missing");
        vals_r__ = context__.vals_r("sd_gamma_geo");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_gamma_geo", "double", context__.to_vec());
        // generate_declaration sd_gamma_geo
        double sd_gamma_geo(0);
        sd_gamma_geo = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_gamma_geo);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_gamma_geo: ") + e.what());
        }

        if (!(context__.contains_r("sd_gamma_demo")))
            throw std::runtime_error("variable sd_gamma_demo missing");
        vals_r__ = context__.vals_r("sd_gamma_demo");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_gamma_demo", "double", context__.to_vec());
        // generate_declaration sd_gamma_demo
        double sd_gamma_demo(0);
        sd_gamma_demo = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_gamma_demo);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_gamma_demo: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_delta")))
            throw std::runtime_error("variable sd_innov_delta missing");
        vals_r__ = context__.vals_r("sd_innov_delta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_delta", "double", context__.to_vec());
        // generate_declaration sd_innov_delta
        double sd_innov_delta(0);
        sd_innov_delta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_delta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_delta: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_logsd")))
            throw std::runtime_error("variable sd_innov_logsd missing");
        vals_r__ = context__.vals_r("sd_innov_logsd");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_logsd", "double", context__.to_vec());
        // generate_declaration sd_innov_logsd
        double sd_innov_logsd(0);
        sd_innov_logsd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_logsd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_logsd: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_gamma")))
            throw std::runtime_error("variable sd_innov_gamma missing");
        vals_r__ = context__.vals_r("sd_innov_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_gamma", "double", context__.to_vec());
        // generate_declaration sd_innov_gamma
        double sd_innov_gamma(0);
        sd_innov_gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_gamma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > diff_raw;
        size_t dim_diff_raw_0__ = D;
        diff_raw.reserve(dim_diff_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_diff_raw_0__; ++k_0__) {
            if (jacobian__)
                diff_raw.push_back(in__.vector_constrain(Q,lp__));
            else
                diff_raw.push_back(in__.vector_constrain(Q));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  disc_raw;
        (void) disc_raw;  // dummy to suppress unused var warning
        if (jacobian__)
            disc_raw = in__.vector_lb_constrain(0,Q,lp__);
        else
            disc_raw = in__.vector_lb_constrain(0,Q);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  xi;
        (void) xi;  // dummy to suppress unused var warning
        if (jacobian__)
            xi = in__.vector_constrain(T,lp__);
        else
            xi = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        gamma_raw.reserve(dim_gamma_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            if (jacobian__)
                gamma_raw.push_back(in__.vector_constrain(P,lp__));
            else
                gamma_raw.push_back(in__.vector_constrain(P));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_gamma;
        (void) delta_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_gamma = in__.vector_constrain(T,lp__);
        else
            delta_gamma = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > nu_geo;
        size_t dim_nu_geo_0__ = T;
        nu_geo.reserve(dim_nu_geo_0__);
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            if (jacobian__)
                nu_geo.push_back(in__.vector_constrain(H,lp__));
            else
                nu_geo.push_back(in__.vector_constrain(H));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  nu_geo_prior;
        (void) nu_geo_prior;  // dummy to suppress unused var warning
        if (jacobian__)
            nu_geo_prior = in__.vector_constrain(Hprior,lp__);
        else
            nu_geo_prior = in__.vector_constrain(Hprior);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_tbar;
        (void) delta_tbar;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_tbar = in__.vector_constrain(T,lp__);
        else
            delta_tbar = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        theta_bar_raw.reserve(dim_theta_bar_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            if (jacobian__)
                theta_bar_raw.push_back(in__.vector_constrain(G,lp__));
            else
                theta_bar_raw.push_back(in__.vector_constrain(G));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta_bar;
        (void) sd_theta_bar;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta_bar = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta_bar = in__.vector_lb_constrain(0,T);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta;
        (void) sd_theta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta = in__.vector_lb_constrain(0,T);

        T__ sd_gamma_geo;
        (void) sd_gamma_geo;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_gamma_geo = in__.scalar_lb_constrain(0,lp__);
        else
            sd_gamma_geo = in__.scalar_lb_constrain(0);

        T__ sd_gamma_demo;
        (void) sd_gamma_demo;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_gamma_demo = in__.scalar_lb_constrain(0,lp__);
        else
            sd_gamma_demo = in__.scalar_lb_constrain(0);

        T__ sd_innov_delta;
        (void) sd_innov_delta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_delta = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_delta = in__.scalar_lb_constrain(0);

        T__ sd_innov_logsd;
        (void) sd_innov_logsd;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_logsd = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_logsd = in__.scalar_lb_constrain(0);

        T__ sd_innov_gamma;
        (void) sd_innov_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_gamma = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_gamma = in__.scalar_lb_constrain(0);


        // transformed parameters
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, DUMMY_VAR__);
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > diff(D, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(diff, DUMMY_VAR__);
        stan::math::fill(diff,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > kappa(D, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(kappa, DUMMY_VAR__);
        stan::math::fill(kappa,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  disc(static_cast<Eigen::VectorXd::Index>(Q));
        (void) disc;  // dummy to suppress unused var warning
        stan::math::initialize(disc, DUMMY_VAR__);
        stan::math::fill(disc,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) sd_item;  // dummy to suppress unused var warning
        stan::math::initialize(sd_item, DUMMY_VAR__);
        stan::math::fill(sd_item,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  var_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) var_item;  // dummy to suppress unused var warning
        stan::math::initialize(var_item, DUMMY_VAR__);
        stan::math::fill(var_item,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  var_theta(static_cast<Eigen::VectorXd::Index>(T));
        (void) var_theta;  // dummy to suppress unused var warning
        stan::math::initialize(var_theta, DUMMY_VAR__);
        stan::math::fill(var_theta,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, DUMMY_VAR__);
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, DUMMY_VAR__);
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > z(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<vector<T__> > > prob(T, (vector<vector<T__> >(Q, (vector<T__>(G)))));
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob,DUMMY_VAR__);


        try {
            current_statement_begin__ = 70;
            stan::math::assign(disc, multiply(disc_raw,pow(exp(sum(log(disc_raw))),-(inv(Q)))));
            current_statement_begin__ = 71;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 72;
                stan::math::assign(get_base1_lhs(sd_item,q,"sd_item",1), inv(get_base1(disc,q,"disc",1)));
            }
            current_statement_begin__ = 74;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 76;
                stan::math::assign(get_base1_lhs(diff,d,"diff",1), subtract(get_base1(diff_raw,d,"diff_raw",1),mean(get_base1(diff_raw,1,"diff_raw",1))));
                current_statement_begin__ = 77;
                stan::math::assign(get_base1_lhs(kappa,d,"kappa",1), elt_divide(get_base1(diff,d,"diff",1),disc));
            }
            current_statement_begin__ = 79;
            stan::math::assign(var_item, elt_multiply(sd_item,sd_item));
            current_statement_begin__ = 80;
            stan::math::assign(var_theta, elt_multiply(sd_theta,sd_theta));
            current_statement_begin__ = 81;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 82;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 83;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 84;
                    for (int p = 1; p <= P; ++p) {

                        current_statement_begin__ = 85;
                        if (as_bool(logical_lte(p,S))) {

                            current_statement_begin__ = 86;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                        current_statement_begin__ = 88;
                        if (as_bool(logical_gt(p,S))) {

                            current_statement_begin__ = 89;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                    }
                    current_statement_begin__ = 92;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 95;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 96;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 104;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 105;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 106;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 107;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                            current_statement_begin__ = 109;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 110;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                        }
                    } else {

                        current_statement_begin__ = 116;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 117;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 118;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), ((get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2) * get_base1(delta_gamma,t,"delta_gamma",1)) + multiply(get_base1(get_base1(ZZ,t,"ZZ",1),p,"ZZ",2),get_base1(nu_geo,t,"nu_geo",1))));
                            }
                            current_statement_begin__ = 120;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 121;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2));
                            }
                        }
                        current_statement_begin__ = 124;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 126;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 130;
                if (as_bool(logical_eq(hierarchical_model,1))) {

                    current_statement_begin__ = 131;
                    stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                }
                current_statement_begin__ = 133;
                if (as_bool(logical_eq(hierarchical_model,0))) {

                    current_statement_begin__ = 134;
                    stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1)));
                }
                current_statement_begin__ = 137;
                for (int q = 1; q <= Q; ++q) {
                    {
                        T__ sd_tq;
                        (void) sd_tq;  // dummy to suppress unused var warning
                        stan::math::initialize(sd_tq, DUMMY_VAR__);
                        stan::math::fill(sd_tq,DUMMY_VAR__);


                        current_statement_begin__ = 139;
                        stan::math::assign(sd_tq, sqrt((get_base1(var_theta,t,"var_theta",1) + get_base1(var_item,q,"var_item",1))));
                        current_statement_begin__ = 141;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 142;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)),sd_tq));
                        }
                        current_statement_begin__ = 144;
                        if (as_bool(logical_eq(constant_item,1))) {

                            current_statement_begin__ = 145;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)),sd_tq));
                        }
                        current_statement_begin__ = 147;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 148;
                            if (as_bool(logical_eq(Q,1))) {

                                current_statement_begin__ = 150;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(theta_bar,t,"theta_bar",1),g,"theta_bar",2)));
                            }
                            current_statement_begin__ = 152;
                            if (as_bool(logical_gt(Q,1))) {

                                current_statement_begin__ = 154;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                            }
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < D; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                if (stan::math::is_uninitialized(diff[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: diff" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < D; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                if (stan::math::is_uninitialized(kappa[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: kappa" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(disc(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: disc" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(sd_item(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sd_item" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < Q; ++i0__) {
            if (stan::math::is_uninitialized(var_item(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: var_item" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            if (stan::math::is_uninitialized(var_theta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: var_theta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(mu_theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(mu_gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(z[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(prob[i0__][i1__][i2__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prob" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"disc",disc,0);
        check_greater_or_equal(function__,"sd_item",sd_item,0);
        check_greater_or_equal(function__,"var_item",var_item,0);
        check_greater_or_equal(function__,"var_theta",var_theta,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // model body
        try {
            {
                vector<T__> prob_vec(N);
                stan::math::initialize(prob_vec, DUMMY_VAR__);
                stan::math::fill(prob_vec,DUMMY_VAR__);
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning
                stan::math::fill(pos, std::numeric_limits<int>::min());


                current_statement_begin__ = 165;
                stan::math::assign(pos, 0);
                current_statement_begin__ = 168;
                if (as_bool(logical_eq(constant_item,1))) {

                    current_statement_begin__ = 169;
                    lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,1,"diff_raw",1), 0, 1));
                }
                current_statement_begin__ = 171;
                lp_accum__.add(lognormal_log<propto__>(disc_raw, 0, 1));
                current_statement_begin__ = 172;
                lp_accum__.add(cauchy_log<propto__>(sd_gamma_geo, 0, 2.5));
                current_statement_begin__ = 173;
                lp_accum__.add(cauchy_log<propto__>(sd_gamma_demo, 0, 2.5));
                current_statement_begin__ = 174;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_delta, 0, innov_sd_delta_scale));
                current_statement_begin__ = 175;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_gamma, 0, 2.5));
                current_statement_begin__ = 176;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_logsd, 0, innov_sd_theta_scale));
                current_statement_begin__ = 178;
                for (int t = 1; t <= T; ++t) {

                    current_statement_begin__ = 179;
                    lp_accum__.add(normal_log<propto__>(get_base1(gamma_raw,t,"gamma_raw",1), 0, 1));
                    current_statement_begin__ = 180;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta_bar_raw,t,"theta_bar_raw",1), 0, 1));
                    current_statement_begin__ = 181;
                    if (as_bool(logical_eq(t,1))) {

                        current_statement_begin__ = 182;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 183;
                            lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,t,"diff_raw",1), 0, 1));
                        }
                        current_statement_begin__ = 186;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), 0, 2.5));
                        current_statement_begin__ = 187;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta,t,"sd_theta",1), 0, 2.5));
                        current_statement_begin__ = 188;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), 0, 10));
                        current_statement_begin__ = 189;
                        lp_accum__.add(normal_log<propto__>(nu_geo_prior, 0, 10));
                        current_statement_begin__ = 190;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), 0.5, 0.5));
                        current_statement_begin__ = 191;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), delta_tbar_prior_mean, delta_tbar_prior_sd));
                        current_statement_begin__ = 192;
                        lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                    }
                    current_statement_begin__ = 194;
                    if (as_bool(logical_gt(t,1))) {

                        current_statement_begin__ = 198;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 199;
                            lp_accum__.add(normal_log<propto__>(get_base1(diff_raw,t,"diff_raw",1), get_base1(diff_raw,(t - 1),"diff_raw",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 203;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), get_base1(delta_gamma,(t - 1),"delta_gamma",1), sd_innov_delta));
                        current_statement_begin__ = 204;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), get_base1(nu_geo,(t - 1),"nu_geo",1), sd_innov_delta));
                        current_statement_begin__ = 205;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), get_base1(delta_tbar,(t - 1),"delta_tbar",1), sd_innov_delta));
                        current_statement_begin__ = 206;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), log(get_base1(sd_theta_bar,(t - 1),"sd_theta_bar",1)), sd_innov_logsd));
                        current_statement_begin__ = 207;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta,t,"sd_theta",1), log(get_base1(sd_theta,(t - 1),"sd_theta",1)), sd_innov_logsd));
                        current_statement_begin__ = 208;
                        if (as_bool((primitive_value(logical_eq(separate_t,0)) && primitive_value(logical_gt(t,2))))) {

                            current_statement_begin__ = 209;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), get_base1(xi,(t - 1),"xi",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 211;
                        if (as_bool((primitive_value(logical_eq(separate_t,1)) || primitive_value(logical_eq(t,2))))) {

                            current_statement_begin__ = 212;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                        }
                    }
                    current_statement_begin__ = 216;
                    for (int q = 1; q <= Q; ++q) {

                        current_statement_begin__ = 217;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 218;
                            stan::math::assign(pos, (pos + 1));
                            current_statement_begin__ = 219;
                            stan::math::assign(get_base1_lhs(prob_vec,pos,"prob_vec",1), get_base1(get_base1(get_base1(prob,t,"prob",1),q,"prob",2),g,"prob",3));
                        }
                    }
                }
                current_statement_begin__ = 226;
                lp_accum__.add(binomial_log<propto__>(stan::model::rvalue(s_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "s_vec"), stan::model::rvalue(n_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "n_vec"), stan::model::rvalue(prob_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "prob_vec")));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("diff_raw");
        names__.push_back("disc_raw");
        names__.push_back("xi");
        names__.push_back("gamma_raw");
        names__.push_back("delta_gamma");
        names__.push_back("nu_geo");
        names__.push_back("nu_geo_prior");
        names__.push_back("delta_tbar");
        names__.push_back("theta_bar_raw");
        names__.push_back("sd_theta_bar");
        names__.push_back("sd_theta");
        names__.push_back("sd_gamma_geo");
        names__.push_back("sd_gamma_demo");
        names__.push_back("sd_innov_delta");
        names__.push_back("sd_innov_logsd");
        names__.push_back("sd_innov_gamma");
        names__.push_back("theta_bar");
        names__.push_back("diff");
        names__.push_back("kappa");
        names__.push_back("disc");
        names__.push_back("sd_item");
        names__.push_back("var_item");
        names__.push_back("var_theta");
        names__.push_back("gamma");
        names__.push_back("mu_theta_bar");
        names__.push_back("mu_gamma");
        names__.push_back("z");
        names__.push_back("prob");
        names__.push_back("sd_total");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Hprior);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_2017_01_04_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector<vector_d> diff_raw;
        size_t dim_diff_raw_0__ = D;
        for (size_t k_0__ = 0; k_0__ < dim_diff_raw_0__; ++k_0__) {
            diff_raw.push_back(in__.vector_constrain(Q));
        }
        vector_d disc_raw = in__.vector_lb_constrain(0,Q);
        vector_d xi = in__.vector_constrain(T);
        vector<vector_d> gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            gamma_raw.push_back(in__.vector_constrain(P));
        }
        vector_d delta_gamma = in__.vector_constrain(T);
        vector<vector_d> nu_geo;
        size_t dim_nu_geo_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            nu_geo.push_back(in__.vector_constrain(H));
        }
        vector_d nu_geo_prior = in__.vector_constrain(Hprior);
        vector_d delta_tbar = in__.vector_constrain(T);
        vector<vector_d> theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            theta_bar_raw.push_back(in__.vector_constrain(G));
        }
        vector_d sd_theta_bar = in__.vector_lb_constrain(0,T);
        vector_d sd_theta = in__.vector_lb_constrain(0,T);
        double sd_gamma_geo = in__.scalar_lb_constrain(0);
        double sd_gamma_demo = in__.scalar_lb_constrain(0);
        double sd_innov_delta = in__.scalar_lb_constrain(0);
        double sd_innov_logsd = in__.scalar_lb_constrain(0);
        double sd_innov_gamma = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(diff_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(disc_raw[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(xi[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_gamma[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < H; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(nu_geo[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Hprior; ++k_0__) {
            vars__.push_back(nu_geo_prior[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_tbar[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta_bar[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta[k_0__]);
        }
        vars__.push_back(sd_gamma_geo);
        vars__.push_back(sd_gamma_demo);
        vars__.push_back(sd_innov_delta);
        vars__.push_back(sd_innov_logsd);
        vars__.push_back(sd_innov_gamma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector<vector_d> theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<vector_d> diff(D, (vector_d(static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(diff, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(diff,DUMMY_VAR__);
        vector<vector_d> kappa(D, (vector_d(static_cast<Eigen::VectorXd::Index>(Q))));
        stan::math::initialize(kappa, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(kappa,DUMMY_VAR__);
        vector_d disc(static_cast<Eigen::VectorXd::Index>(Q));
        (void) disc;  // dummy to suppress unused var warning
        stan::math::initialize(disc, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(disc,DUMMY_VAR__);
        vector_d sd_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) sd_item;  // dummy to suppress unused var warning
        stan::math::initialize(sd_item, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sd_item,DUMMY_VAR__);
        vector_d var_item(static_cast<Eigen::VectorXd::Index>(Q));
        (void) var_item;  // dummy to suppress unused var warning
        stan::math::initialize(var_item, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_item,DUMMY_VAR__);
        vector_d var_theta(static_cast<Eigen::VectorXd::Index>(T));
        (void) var_theta;  // dummy to suppress unused var warning
        stan::math::initialize(var_theta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(var_theta,DUMMY_VAR__);
        vector<vector_d> gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<vector_d> mu_theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<vector_d> mu_gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<vector_d> > z(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<vector<double> > > prob(T, (vector<vector<double> >(Q, (vector<double>(G, 0.0)))));
        stan::math::initialize(prob, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prob,DUMMY_VAR__);


        try {
            current_statement_begin__ = 70;
            stan::math::assign(disc, multiply(disc_raw,pow(exp(sum(log(disc_raw))),-(inv(Q)))));
            current_statement_begin__ = 71;
            for (int q = 1; q <= Q; ++q) {

                current_statement_begin__ = 72;
                stan::math::assign(get_base1_lhs(sd_item,q,"sd_item",1), inv(get_base1(disc,q,"disc",1)));
            }
            current_statement_begin__ = 74;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 76;
                stan::math::assign(get_base1_lhs(diff,d,"diff",1), subtract(get_base1(diff_raw,d,"diff_raw",1),mean(get_base1(diff_raw,1,"diff_raw",1))));
                current_statement_begin__ = 77;
                stan::math::assign(get_base1_lhs(kappa,d,"kappa",1), elt_divide(get_base1(diff,d,"diff",1),disc));
            }
            current_statement_begin__ = 79;
            stan::math::assign(var_item, elt_multiply(sd_item,sd_item));
            current_statement_begin__ = 80;
            stan::math::assign(var_theta, elt_multiply(sd_theta,sd_theta));
            current_statement_begin__ = 81;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 82;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 83;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 84;
                    for (int p = 1; p <= P; ++p) {

                        current_statement_begin__ = 85;
                        if (as_bool(logical_lte(p,S))) {

                            current_statement_begin__ = 86;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                        current_statement_begin__ = 88;
                        if (as_bool(logical_gt(p,S))) {

                            current_statement_begin__ = 89;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                    }
                    current_statement_begin__ = 92;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 95;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 96;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 104;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 105;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 106;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 107;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                            current_statement_begin__ = 109;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 110;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                        }
                    } else {

                        current_statement_begin__ = 116;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 117;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 118;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), ((get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2) * get_base1(delta_gamma,t,"delta_gamma",1)) + multiply(get_base1(get_base1(ZZ,t,"ZZ",1),p,"ZZ",2),get_base1(nu_geo,t,"nu_geo",1))));
                            }
                            current_statement_begin__ = 120;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 121;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2));
                            }
                        }
                        current_statement_begin__ = 124;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 126;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 130;
                if (as_bool(logical_eq(hierarchical_model,1))) {

                    current_statement_begin__ = 131;
                    stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                }
                current_statement_begin__ = 133;
                if (as_bool(logical_eq(hierarchical_model,0))) {

                    current_statement_begin__ = 134;
                    stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1)));
                }
                current_statement_begin__ = 137;
                for (int q = 1; q <= Q; ++q) {
                    {
                        double sd_tq(0.0);
                        (void) sd_tq;  // dummy to suppress unused var warning
                        stan::math::initialize(sd_tq, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(sd_tq,DUMMY_VAR__);


                        current_statement_begin__ = 139;
                        stan::math::assign(sd_tq, sqrt((get_base1(var_theta,t,"var_theta",1) + get_base1(var_item,q,"var_item",1))));
                        current_statement_begin__ = 141;
                        if (as_bool(logical_eq(constant_item,0))) {

                            current_statement_begin__ = 142;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,t,"kappa",1),q,"kappa",2)),sd_tq));
                        }
                        current_statement_begin__ = 144;
                        if (as_bool(logical_eq(constant_item,1))) {

                            current_statement_begin__ = 145;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), divide(subtract(get_base1(theta_bar,t,"theta_bar",1),get_base1(get_base1(kappa,1,"kappa",1),q,"kappa",2)),sd_tq));
                        }
                        current_statement_begin__ = 147;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 148;
                            if (as_bool(logical_eq(Q,1))) {

                                current_statement_begin__ = 150;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(theta_bar,t,"theta_bar",1),g,"theta_bar",2)));
                            }
                            current_statement_begin__ = 152;
                            if (as_bool(logical_gt(Q,1))) {

                                current_statement_begin__ = 154;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                            }
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"disc",disc,0);
        check_greater_or_equal(function__,"sd_item",sd_item,0);
        check_greater_or_equal(function__,"var_item",var_item,0);
        check_greater_or_equal(function__,"var_theta",var_theta,0);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(diff[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
            for (int k_0__ = 0; k_0__ < D; ++k_0__) {
                vars__.push_back(kappa[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(disc[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(sd_item[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Q; ++k_0__) {
            vars__.push_back(var_item[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(var_theta[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_gamma[k_0__][k_1__]);
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(z[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(prob[k_0__][k_1__][k_2__]);
                }
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d sd_total(static_cast<Eigen::VectorXd::Index>(T));
        (void) sd_total;  // dummy to suppress unused var warning
        stan::math::initialize(sd_total, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sd_total,DUMMY_VAR__);


        try {
            current_statement_begin__ = 231;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 232;
                stan::math::assign(get_base1_lhs(sd_total,t,"sd_total",1), sqrt((variance(get_base1(theta_bar,t,"theta_bar",1)) + square(get_base1(sd_theta,t,"sd_theta",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"sd_total",sd_total,0);

        // write generated quantities
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_total[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_2017_01_04";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_geo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_demo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kappa" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_total" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc_raw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_geo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_demo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "diff" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "kappa" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "disc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_item" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "var_theta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_total" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace




// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_2017_01_04_singleissue_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_2017_01_04_singleissue : public prob_grad {
private:
    int G;
    int G_hier;
    int Q;
    int T;
    int N;
    int N_observed;
    int S;
    int P;
    int H;
    int Hprior;
    int D;
    int constant_item;
    int separate_t;
    double delta_tbar_prior_mean;
    double delta_tbar_prior_sd;
    double innov_sd_delta_scale;
    double innov_sd_theta_scale;
    vector<int> n_vec;
    vector<int> s_vec;
    vector<int> observed;
    vector<vector<vector<int> > > NNl2;
    vector<vector<vector<int> > > SSl2;
    matrix_d XX;
    vector<matrix_d> WT;
    vector<matrix_d> ZZ;
    vector<matrix_d> ZZ_prior;
    matrix_d l2_only;
public:
    model_2017_01_04_singleissue(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_2017_01_04_singleissue(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_2017_01_04_singleissue_namespace::model_2017_01_04_singleissue";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G_hier", "int", context__.to_vec());
        G_hier = int(0);
        vals_i__ = context__.vals_i("G_hier");
        pos__ = 0;
        G_hier = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
        Q = int(0);
        vals_i__ = context__.vals_i("Q");
        pos__ = 0;
        Q = vals_i__[pos__++];
        context__.validate_dims("data initialization", "T", "int", context__.to_vec());
        T = int(0);
        vals_i__ = context__.vals_i("T");
        pos__ = 0;
        T = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_observed", "int", context__.to_vec());
        N_observed = int(0);
        vals_i__ = context__.vals_i("N_observed");
        pos__ = 0;
        N_observed = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "P", "int", context__.to_vec());
        P = int(0);
        vals_i__ = context__.vals_i("P");
        pos__ = 0;
        P = vals_i__[pos__++];
        context__.validate_dims("data initialization", "H", "int", context__.to_vec());
        H = int(0);
        vals_i__ = context__.vals_i("H");
        pos__ = 0;
        H = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Hprior", "int", context__.to_vec());
        Hprior = int(0);
        vals_i__ = context__.vals_i("Hprior");
        pos__ = 0;
        Hprior = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "constant_item", "int", context__.to_vec());
        constant_item = int(0);
        vals_i__ = context__.vals_i("constant_item");
        pos__ = 0;
        constant_item = vals_i__[pos__++];
        context__.validate_dims("data initialization", "separate_t", "int", context__.to_vec());
        separate_t = int(0);
        vals_i__ = context__.vals_i("separate_t");
        pos__ = 0;
        separate_t = vals_i__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_mean", "double", context__.to_vec());
        delta_tbar_prior_mean = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_mean");
        pos__ = 0;
        delta_tbar_prior_mean = vals_r__[pos__++];
        context__.validate_dims("data initialization", "delta_tbar_prior_sd", "double", context__.to_vec());
        delta_tbar_prior_sd = double(0);
        vals_r__ = context__.vals_r("delta_tbar_prior_sd");
        pos__ = 0;
        delta_tbar_prior_sd = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_delta_scale", "double", context__.to_vec());
        innov_sd_delta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_delta_scale");
        pos__ = 0;
        innov_sd_delta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "innov_sd_theta_scale", "double", context__.to_vec());
        innov_sd_theta_scale = double(0);
        vals_r__ = context__.vals_r("innov_sd_theta_scale");
        pos__ = 0;
        innov_sd_theta_scale = vals_r__[pos__++];
        context__.validate_dims("data initialization", "n_vec", "int", context__.to_vec(N));
        validate_non_negative_index("n_vec", "N", N);
        n_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("n_vec");
        pos__ = 0;
        size_t n_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < n_vec_limit_0__; ++i_0__) {
            n_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "s_vec", "int", context__.to_vec(N));
        validate_non_negative_index("s_vec", "N", N);
        s_vec = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("s_vec");
        pos__ = 0;
        size_t s_vec_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < s_vec_limit_0__; ++i_0__) {
            s_vec[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "observed", "int", context__.to_vec(N_observed));
        validate_non_negative_index("observed", "N_observed", N_observed);
        observed = std::vector<int>(N_observed,int(0));
        vals_i__ = context__.vals_i("observed");
        pos__ = 0;
        size_t observed_limit_0__ = N_observed;
        for (size_t i_0__ = 0; i_0__ < observed_limit_0__; ++i_0__) {
            observed[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "NNl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("NNl2", "T", T);
        validate_non_negative_index("NNl2", "Q", Q);
        validate_non_negative_index("NNl2", "G_hier", G_hier);
        NNl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("NNl2");
        pos__ = 0;
        size_t NNl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < NNl2_limit_2__; ++i_2__) {
            size_t NNl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < NNl2_limit_1__; ++i_1__) {
                size_t NNl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < NNl2_limit_0__; ++i_0__) {
                    NNl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "SSl2", "int", context__.to_vec(T,Q,G_hier));
        validate_non_negative_index("SSl2", "T", T);
        validate_non_negative_index("SSl2", "Q", Q);
        validate_non_negative_index("SSl2", "G_hier", G_hier);
        SSl2 = std::vector<std::vector<std::vector<int> > >(T,std::vector<std::vector<int> >(Q,std::vector<int>(G_hier,int(0))));
        vals_i__ = context__.vals_i("SSl2");
        pos__ = 0;
        size_t SSl2_limit_2__ = G_hier;
        for (size_t i_2__ = 0; i_2__ < SSl2_limit_2__; ++i_2__) {
            size_t SSl2_limit_1__ = Q;
            for (size_t i_1__ = 0; i_1__ < SSl2_limit_1__; ++i_1__) {
                size_t SSl2_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < SSl2_limit_0__; ++i_0__) {
                    SSl2[i_0__][i_1__][i_2__] = vals_i__[pos__++];
                }
            }
        }
        context__.validate_dims("data initialization", "XX", "matrix_d", context__.to_vec(G,P));
        validate_non_negative_index("XX", "G", G);
        validate_non_negative_index("XX", "P", P);
        XX = matrix_d(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(P));
        vals_r__ = context__.vals_r("XX");
        pos__ = 0;
        size_t XX_m_mat_lim__ = G;
        size_t XX_n_mat_lim__ = P;
        for (size_t n_mat__ = 0; n_mat__ < XX_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < XX_m_mat_lim__; ++m_mat__) {
                XX(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "WT", "matrix_d", context__.to_vec(T,G_hier,G));
        validate_non_negative_index("WT", "T", T);
        validate_non_negative_index("WT", "G_hier", G_hier);
        validate_non_negative_index("WT", "G", G);
        WT = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(G_hier),static_cast<Eigen::VectorXd::Index>(G)));
        vals_r__ = context__.vals_r("WT");
        pos__ = 0;
        size_t WT_m_mat_lim__ = G_hier;
        size_t WT_n_mat_lim__ = G;
        for (size_t n_mat__ = 0; n_mat__ < WT_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < WT_m_mat_lim__; ++m_mat__) {
                size_t WT_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < WT_limit_0__; ++i_0__) {
                    WT[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ", "matrix_d", context__.to_vec(T,P,H));
        validate_non_negative_index("ZZ", "T", T);
        validate_non_negative_index("ZZ", "P", P);
        validate_non_negative_index("ZZ", "H", H);
        ZZ = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(H)));
        vals_r__ = context__.vals_r("ZZ");
        pos__ = 0;
        size_t ZZ_m_mat_lim__ = P;
        size_t ZZ_n_mat_lim__ = H;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_m_mat_lim__; ++m_mat__) {
                size_t ZZ_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_limit_0__; ++i_0__) {
                    ZZ[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "ZZ_prior", "matrix_d", context__.to_vec(T,P,Hprior));
        validate_non_negative_index("ZZ_prior", "T", T);
        validate_non_negative_index("ZZ_prior", "P", P);
        validate_non_negative_index("ZZ_prior", "Hprior", Hprior);
        ZZ_prior = std::vector<matrix_d>(T,matrix_d(static_cast<Eigen::VectorXd::Index>(P),static_cast<Eigen::VectorXd::Index>(Hprior)));
        vals_r__ = context__.vals_r("ZZ_prior");
        pos__ = 0;
        size_t ZZ_prior_m_mat_lim__ = P;
        size_t ZZ_prior_n_mat_lim__ = Hprior;
        for (size_t n_mat__ = 0; n_mat__ < ZZ_prior_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < ZZ_prior_m_mat_lim__; ++m_mat__) {
                size_t ZZ_prior_limit_0__ = T;
                for (size_t i_0__ = 0; i_0__ < ZZ_prior_limit_0__; ++i_0__) {
                    ZZ_prior[i_0__](m_mat__,n_mat__) = vals_r__[pos__++];
            }
            }
        }
        context__.validate_dims("data initialization", "l2_only", "matrix_d", context__.to_vec(T,Q));
        validate_non_negative_index("l2_only", "T", T);
        validate_non_negative_index("l2_only", "Q", Q);
        l2_only = matrix_d(static_cast<Eigen::VectorXd::Index>(T),static_cast<Eigen::VectorXd::Index>(Q));
        vals_r__ = context__.vals_r("l2_only");
        pos__ = 0;
        size_t l2_only_m_mat_lim__ = T;
        size_t l2_only_n_mat_lim__ = Q;
        for (size_t n_mat__ = 0; n_mat__ < l2_only_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < l2_only_m_mat_lim__; ++m_mat__) {
                l2_only(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"G_hier",G_hier,1);
        check_greater_or_equal(function__,"Q",Q,1);
        check_greater_or_equal(function__,"T",T,1);
        check_greater_or_equal(function__,"N",N,1);
        check_greater_or_equal(function__,"N_observed",N_observed,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"P",P,1);
        check_greater_or_equal(function__,"H",H,1);
        check_greater_or_equal(function__,"Hprior",Hprior,1);
        check_greater_or_equal(function__,"D",D,1);
        check_greater_or_equal(function__,"constant_item",constant_item,0);
        check_less_or_equal(function__,"constant_item",constant_item,1);
        check_greater_or_equal(function__,"separate_t",separate_t,0);
        check_less_or_equal(function__,"separate_t",separate_t,1);
        check_greater_or_equal(function__,"delta_tbar_prior_sd",delta_tbar_prior_sd,0);
        check_greater_or_equal(function__,"innov_sd_delta_scale",innov_sd_delta_scale,0);
        check_greater_or_equal(function__,"innov_sd_theta_scale",innov_sd_theta_scale,0);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"n_vec[k0__]",n_vec[k0__],0);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"s_vec[k0__]",s_vec[k0__],0);
        }
        check_greater_or_equal(function__,"XX",XX,0);
        check_less_or_equal(function__,"XX",XX,1);
        for (int k0__ = 0; k0__ < T; ++k0__) {
            check_greater_or_equal(function__,"WT[k0__]",WT[k0__],0);
            check_less_or_equal(function__,"WT[k0__]",WT[k0__],1);
        }
        check_greater_or_equal(function__,"l2_only",l2_only,0);
        check_less_or_equal(function__,"l2_only",l2_only,1);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += T;
        num_params_r__ += P * T;
        num_params_r__ += T;
        num_params_r__ += H * T;
        num_params_r__ += Hprior;
        num_params_r__ += T;
        num_params_r__ += G * T;
        num_params_r__ += T;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~model_2017_01_04_singleissue() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("xi")))
            throw std::runtime_error("variable xi missing");
        vals_r__ = context__.vals_r("xi");
        pos__ = 0U;
        context__.validate_dims("initialization", "xi", "vector_d", context__.to_vec(T));
        // generate_declaration xi
        vector_d xi(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            xi(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(xi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xi: ") + e.what());
        }

        if (!(context__.contains_r("gamma_raw")))
            throw std::runtime_error("variable gamma_raw missing");
        vals_r__ = context__.vals_r("gamma_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma_raw", "vector_d", context__.to_vec(T,P));
        // generate_declaration gamma_raw
        std::vector<vector_d> gamma_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(P)));
        for (int j1__ = 0U; j1__ < P; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                gamma_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(gamma_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma_raw: ") + e.what());
        }

        if (!(context__.contains_r("delta_gamma")))
            throw std::runtime_error("variable delta_gamma missing");
        vals_r__ = context__.vals_r("delta_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_gamma", "vector_d", context__.to_vec(T));
        // generate_declaration delta_gamma
        vector_d delta_gamma(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_gamma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_gamma: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo")))
            throw std::runtime_error("variable nu_geo missing");
        vals_r__ = context__.vals_r("nu_geo");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo", "vector_d", context__.to_vec(T,H));
        // generate_declaration nu_geo
        std::vector<vector_d> nu_geo(T,vector_d(static_cast<Eigen::VectorXd::Index>(H)));
        for (int j1__ = 0U; j1__ < H; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                nu_geo[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(nu_geo[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo: ") + e.what());
        }

        if (!(context__.contains_r("nu_geo_prior")))
            throw std::runtime_error("variable nu_geo_prior missing");
        vals_r__ = context__.vals_r("nu_geo_prior");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_geo_prior", "vector_d", context__.to_vec(Hprior));
        // generate_declaration nu_geo_prior
        vector_d nu_geo_prior(static_cast<Eigen::VectorXd::Index>(Hprior));
        for (int j1__ = 0U; j1__ < Hprior; ++j1__)
            nu_geo_prior(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(nu_geo_prior);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_geo_prior: ") + e.what());
        }

        if (!(context__.contains_r("delta_tbar")))
            throw std::runtime_error("variable delta_tbar missing");
        vals_r__ = context__.vals_r("delta_tbar");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta_tbar", "vector_d", context__.to_vec(T));
        // generate_declaration delta_tbar
        vector_d delta_tbar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            delta_tbar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(delta_tbar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_tbar: ") + e.what());
        }

        if (!(context__.contains_r("theta_bar_raw")))
            throw std::runtime_error("variable theta_bar_raw missing");
        vals_r__ = context__.vals_r("theta_bar_raw");
        pos__ = 0U;
        context__.validate_dims("initialization", "theta_bar_raw", "vector_d", context__.to_vec(T,G));
        // generate_declaration theta_bar_raw
        std::vector<vector_d> theta_bar_raw(T,vector_d(static_cast<Eigen::VectorXd::Index>(G)));
        for (int j1__ = 0U; j1__ < G; ++j1__)
            for (int i0__ = 0U; i0__ < T; ++i0__)
                theta_bar_raw[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < T; ++i0__)
            try {
            writer__.vector_unconstrain(theta_bar_raw[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta_bar_raw: ") + e.what());
        }

        if (!(context__.contains_r("sd_theta_bar")))
            throw std::runtime_error("variable sd_theta_bar missing");
        vals_r__ = context__.vals_r("sd_theta_bar");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_theta_bar", "vector_d", context__.to_vec(T));
        // generate_declaration sd_theta_bar
        vector_d sd_theta_bar(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            sd_theta_bar(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_theta_bar);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_theta_bar: ") + e.what());
        }

        if (!(context__.contains_r("sd_gamma_geo")))
            throw std::runtime_error("variable sd_gamma_geo missing");
        vals_r__ = context__.vals_r("sd_gamma_geo");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_gamma_geo", "double", context__.to_vec());
        // generate_declaration sd_gamma_geo
        double sd_gamma_geo(0);
        sd_gamma_geo = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_gamma_geo);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_gamma_geo: ") + e.what());
        }

        if (!(context__.contains_r("sd_gamma_demo")))
            throw std::runtime_error("variable sd_gamma_demo missing");
        vals_r__ = context__.vals_r("sd_gamma_demo");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_gamma_demo", "double", context__.to_vec());
        // generate_declaration sd_gamma_demo
        double sd_gamma_demo(0);
        sd_gamma_demo = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_gamma_demo);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_gamma_demo: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_delta")))
            throw std::runtime_error("variable sd_innov_delta missing");
        vals_r__ = context__.vals_r("sd_innov_delta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_delta", "double", context__.to_vec());
        // generate_declaration sd_innov_delta
        double sd_innov_delta(0);
        sd_innov_delta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_delta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_delta: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_logsd")))
            throw std::runtime_error("variable sd_innov_logsd missing");
        vals_r__ = context__.vals_r("sd_innov_logsd");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_logsd", "double", context__.to_vec());
        // generate_declaration sd_innov_logsd
        double sd_innov_logsd(0);
        sd_innov_logsd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_logsd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_logsd: ") + e.what());
        }

        if (!(context__.contains_r("sd_innov_gamma")))
            throw std::runtime_error("variable sd_innov_gamma missing");
        vals_r__ = context__.vals_r("sd_innov_gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_innov_gamma", "double", context__.to_vec());
        // generate_declaration sd_innov_gamma
        double sd_innov_gamma(0);
        sd_innov_gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_innov_gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_innov_gamma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  xi;
        (void) xi;  // dummy to suppress unused var warning
        if (jacobian__)
            xi = in__.vector_constrain(T,lp__);
        else
            xi = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        gamma_raw.reserve(dim_gamma_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            if (jacobian__)
                gamma_raw.push_back(in__.vector_constrain(P,lp__));
            else
                gamma_raw.push_back(in__.vector_constrain(P));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_gamma;
        (void) delta_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_gamma = in__.vector_constrain(T,lp__);
        else
            delta_gamma = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > nu_geo;
        size_t dim_nu_geo_0__ = T;
        nu_geo.reserve(dim_nu_geo_0__);
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            if (jacobian__)
                nu_geo.push_back(in__.vector_constrain(H,lp__));
            else
                nu_geo.push_back(in__.vector_constrain(H));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  nu_geo_prior;
        (void) nu_geo_prior;  // dummy to suppress unused var warning
        if (jacobian__)
            nu_geo_prior = in__.vector_constrain(Hprior,lp__);
        else
            nu_geo_prior = in__.vector_constrain(Hprior);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta_tbar;
        (void) delta_tbar;  // dummy to suppress unused var warning
        if (jacobian__)
            delta_tbar = in__.vector_constrain(T,lp__);
        else
            delta_tbar = in__.vector_constrain(T);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        theta_bar_raw.reserve(dim_theta_bar_raw_0__);
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            if (jacobian__)
                theta_bar_raw.push_back(in__.vector_constrain(G,lp__));
            else
                theta_bar_raw.push_back(in__.vector_constrain(G));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sd_theta_bar;
        (void) sd_theta_bar;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_theta_bar = in__.vector_lb_constrain(0,T,lp__);
        else
            sd_theta_bar = in__.vector_lb_constrain(0,T);

        T__ sd_gamma_geo;
        (void) sd_gamma_geo;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_gamma_geo = in__.scalar_lb_constrain(0,lp__);
        else
            sd_gamma_geo = in__.scalar_lb_constrain(0);

        T__ sd_gamma_demo;
        (void) sd_gamma_demo;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_gamma_demo = in__.scalar_lb_constrain(0,lp__);
        else
            sd_gamma_demo = in__.scalar_lb_constrain(0);

        T__ sd_innov_delta;
        (void) sd_innov_delta;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_delta = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_delta = in__.scalar_lb_constrain(0);

        T__ sd_innov_logsd;
        (void) sd_innov_logsd;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_logsd = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_logsd = in__.scalar_lb_constrain(0);

        T__ sd_innov_gamma;
        (void) sd_innov_gamma;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_innov_gamma = in__.scalar_lb_constrain(0,lp__);
        else
            sd_innov_gamma = in__.scalar_lb_constrain(0);


        // transformed parameters
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, DUMMY_VAR__);
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_theta_bar(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, DUMMY_VAR__);
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > mu_gamma(T, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, DUMMY_VAR__);
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > > z(T, (vector<Eigen::Matrix<T__,Eigen::Dynamic,1> >(Q, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<vector<T__> > > prob(T, (vector<vector<T__> >(Q, (vector<T__>(G)))));
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob,DUMMY_VAR__);


        try {
            current_statement_begin__ = 60;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 61;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 62;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 63;
                    for (int p = 1; p <= P; ++p) {

                        current_statement_begin__ = 64;
                        if (as_bool(logical_lte(p,S))) {

                            current_statement_begin__ = 65;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                        current_statement_begin__ = 67;
                        if (as_bool(logical_gt(p,S))) {

                            current_statement_begin__ = 68;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                    }
                    current_statement_begin__ = 71;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 74;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 75;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 83;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 84;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 85;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 86;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                            current_statement_begin__ = 88;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 89;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                        }
                    } else {

                        current_statement_begin__ = 95;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 96;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 97;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), ((get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2) * get_base1(delta_gamma,t,"delta_gamma",1)) + multiply(get_base1(get_base1(ZZ,t,"ZZ",1),p,"ZZ",2),get_base1(nu_geo,t,"nu_geo",1))));
                            }
                            current_statement_begin__ = 99;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 100;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2));
                            }
                        }
                        current_statement_begin__ = 103;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 105;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 109;
                stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                current_statement_begin__ = 111;
                for (int q = 1; q <= Q; ++q) {

                    current_statement_begin__ = 113;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), get_base1(theta_bar,t,"theta_bar",1));
                    current_statement_begin__ = 114;
                    for (int g = 1; g <= G; ++g) {

                        current_statement_begin__ = 116;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < G; ++i1__) {
                if (stan::math::is_uninitialized(mu_theta_bar[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_theta_bar" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < P; ++i1__) {
                if (stan::math::is_uninitialized(mu_gamma[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(z[i0__][i1__](i2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < Q; ++i1__) {
                for (int i2__ = 0; i2__ < G; ++i2__) {
                    if (stan::math::is_uninitialized(prob[i0__][i1__][i2__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: prob" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // model body
        try {
            {
                vector<T__> prob_vec(N);
                stan::math::initialize(prob_vec, DUMMY_VAR__);
                stan::math::fill(prob_vec,DUMMY_VAR__);
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning
                stan::math::fill(pos, std::numeric_limits<int>::min());


                current_statement_begin__ = 126;
                stan::math::assign(pos, 0);
                current_statement_begin__ = 129;
                lp_accum__.add(cauchy_log<propto__>(sd_gamma_geo, 0, 2.5));
                current_statement_begin__ = 130;
                lp_accum__.add(cauchy_log<propto__>(sd_gamma_demo, 0, 2.5));
                current_statement_begin__ = 131;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_delta, 0, innov_sd_delta_scale));
                current_statement_begin__ = 132;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_gamma, 0, 2.5));
                current_statement_begin__ = 133;
                lp_accum__.add(cauchy_log<propto__>(sd_innov_logsd, 0, innov_sd_theta_scale));
                current_statement_begin__ = 135;
                for (int t = 1; t <= T; ++t) {

                    current_statement_begin__ = 136;
                    lp_accum__.add(normal_log<propto__>(get_base1(gamma_raw,t,"gamma_raw",1), 0, 1));
                    current_statement_begin__ = 137;
                    lp_accum__.add(normal_log<propto__>(get_base1(theta_bar_raw,t,"theta_bar_raw",1), 0, 1));
                    current_statement_begin__ = 138;
                    if (as_bool(logical_eq(t,1))) {

                        current_statement_begin__ = 140;
                        lp_accum__.add(cauchy_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), 0, 2.5));
                        current_statement_begin__ = 141;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), 0, 1));
                        current_statement_begin__ = 142;
                        lp_accum__.add(normal_log<propto__>(nu_geo_prior, 0, 1));
                        current_statement_begin__ = 143;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), 0.5, 0.5));
                        current_statement_begin__ = 144;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), delta_tbar_prior_mean, delta_tbar_prior_sd));
                        current_statement_begin__ = 145;
                        lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 1));
                    }
                    current_statement_begin__ = 147;
                    if (as_bool(logical_gt(t,1))) {

                        current_statement_begin__ = 150;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_gamma,t,"delta_gamma",1), get_base1(delta_gamma,(t - 1),"delta_gamma",1), sd_innov_delta));
                        current_statement_begin__ = 151;
                        lp_accum__.add(normal_log<propto__>(get_base1(nu_geo,t,"nu_geo",1), get_base1(nu_geo,(t - 1),"nu_geo",1), sd_innov_delta));
                        current_statement_begin__ = 152;
                        lp_accum__.add(normal_log<propto__>(get_base1(delta_tbar,t,"delta_tbar",1), get_base1(delta_tbar,(t - 1),"delta_tbar",1), sd_innov_delta));
                        current_statement_begin__ = 153;
                        lp_accum__.add(lognormal_log<propto__>(get_base1(sd_theta_bar,t,"sd_theta_bar",1), log(get_base1(sd_theta_bar,(t - 1),"sd_theta_bar",1)), sd_innov_logsd));
                        current_statement_begin__ = 154;
                        if (as_bool((primitive_value(logical_eq(separate_t,0)) && primitive_value(logical_gt(t,2))))) {

                            current_statement_begin__ = 155;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), get_base1(xi,(t - 1),"xi",1), sd_innov_gamma));
                        }
                        current_statement_begin__ = 157;
                        if (as_bool((primitive_value(logical_eq(separate_t,1)) || primitive_value(logical_eq(t,2))))) {

                            current_statement_begin__ = 158;
                            lp_accum__.add(normal_log<propto__>(get_base1(xi,t,"xi",1), 0, 10));
                        }
                    }
                    current_statement_begin__ = 161;
                    for (int q = 1; q <= Q; ++q) {

                        current_statement_begin__ = 162;
                        for (int g = 1; g <= G; ++g) {

                            current_statement_begin__ = 163;
                            stan::math::assign(pos, (pos + 1));
                            current_statement_begin__ = 164;
                            stan::math::assign(get_base1_lhs(prob_vec,pos,"prob_vec",1), get_base1(get_base1(get_base1(prob,t,"prob",1),q,"prob",2),g,"prob",3));
                        }
                    }
                }
                current_statement_begin__ = 171;
                lp_accum__.add(binomial_log<propto__>(stan::model::rvalue(s_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "s_vec"), stan::model::rvalue(n_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "n_vec"), stan::model::rvalue(prob_vec, stan::model::cons_list(stan::model::index_multi(observed), stan::model::nil_index_list()), "prob_vec")));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("xi");
        names__.push_back("gamma_raw");
        names__.push_back("delta_gamma");
        names__.push_back("nu_geo");
        names__.push_back("nu_geo_prior");
        names__.push_back("delta_tbar");
        names__.push_back("theta_bar_raw");
        names__.push_back("sd_theta_bar");
        names__.push_back("sd_gamma_geo");
        names__.push_back("sd_gamma_demo");
        names__.push_back("sd_innov_delta");
        names__.push_back("sd_innov_logsd");
        names__.push_back("sd_innov_gamma");
        names__.push_back("theta_bar");
        names__.push_back("gamma");
        names__.push_back("mu_theta_bar");
        names__.push_back("mu_gamma");
        names__.push_back("z");
        names__.push_back("prob");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Hprior);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(Q);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_2017_01_04_singleissue_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d xi = in__.vector_constrain(T);
        vector<vector_d> gamma_raw;
        size_t dim_gamma_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_gamma_raw_0__; ++k_0__) {
            gamma_raw.push_back(in__.vector_constrain(P));
        }
        vector_d delta_gamma = in__.vector_constrain(T);
        vector<vector_d> nu_geo;
        size_t dim_nu_geo_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_nu_geo_0__; ++k_0__) {
            nu_geo.push_back(in__.vector_constrain(H));
        }
        vector_d nu_geo_prior = in__.vector_constrain(Hprior);
        vector_d delta_tbar = in__.vector_constrain(T);
        vector<vector_d> theta_bar_raw;
        size_t dim_theta_bar_raw_0__ = T;
        for (size_t k_0__ = 0; k_0__ < dim_theta_bar_raw_0__; ++k_0__) {
            theta_bar_raw.push_back(in__.vector_constrain(G));
        }
        vector_d sd_theta_bar = in__.vector_lb_constrain(0,T);
        double sd_gamma_geo = in__.scalar_lb_constrain(0);
        double sd_gamma_demo = in__.scalar_lb_constrain(0);
        double sd_innov_delta = in__.scalar_lb_constrain(0);
        double sd_innov_logsd = in__.scalar_lb_constrain(0);
        double sd_innov_gamma = in__.scalar_lb_constrain(0);
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(xi[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_gamma[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < H; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(nu_geo[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < Hprior; ++k_0__) {
            vars__.push_back(nu_geo_prior[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(delta_tbar[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar_raw[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(sd_theta_bar[k_0__]);
        }
        vars__.push_back(sd_gamma_geo);
        vars__.push_back(sd_gamma_demo);
        vars__.push_back(sd_innov_delta);
        vars__.push_back(sd_innov_logsd);
        vars__.push_back(sd_innov_gamma);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector<vector_d> theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(theta_bar,DUMMY_VAR__);
        vector<vector_d> gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(gamma,DUMMY_VAR__);
        vector<vector_d> mu_theta_bar(T, (vector_d(static_cast<Eigen::VectorXd::Index>(G))));
        stan::math::initialize(mu_theta_bar, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_theta_bar,DUMMY_VAR__);
        vector<vector_d> mu_gamma(T, (vector_d(static_cast<Eigen::VectorXd::Index>(P))));
        stan::math::initialize(mu_gamma, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_gamma,DUMMY_VAR__);
        vector<vector<vector_d> > z(T, (vector<vector_d>(Q, (vector_d(static_cast<Eigen::VectorXd::Index>(G))))));
        stan::math::initialize(z, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(z,DUMMY_VAR__);
        vector<vector<vector<double> > > prob(T, (vector<vector<double> >(Q, (vector<double>(G, 0.0)))));
        stan::math::initialize(prob, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(prob,DUMMY_VAR__);


        try {
            current_statement_begin__ = 60;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 61;
                if (as_bool((primitive_value(logical_eq(t,1)) || primitive_value(logical_eq(separate_t,1))))) {

                    current_statement_begin__ = 62;
                    stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                    current_statement_begin__ = 63;
                    for (int p = 1; p <= P; ++p) {

                        current_statement_begin__ = 64;
                        if (as_bool(logical_lte(p,S))) {

                            current_statement_begin__ = 65;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                        current_statement_begin__ = 67;
                        if (as_bool(logical_gt(p,S))) {

                            current_statement_begin__ = 68;
                            stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                        }
                    }
                    current_statement_begin__ = 71;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))));
                }
                current_statement_begin__ = 74;
                if (as_bool((primitive_value(logical_gt(t,1)) && primitive_value(logical_eq(separate_t,0))))) {

                    current_statement_begin__ = 75;
                    if (as_bool(logical_eq(t,2))) {

                        current_statement_begin__ = 83;
                        stan::math::assign(get_base1_lhs(mu_gamma,t,"mu_gamma",1), multiply(get_base1(ZZ_prior,t,"ZZ_prior",1),nu_geo_prior));
                        current_statement_begin__ = 84;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 85;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 86;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_geo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                            current_statement_begin__ = 88;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 89;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(gamma,t,"gamma",1),p,"gamma",2), (get_base1(get_base1(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2) + (sd_gamma_demo * get_base1(get_base1(gamma_raw,t,"gamma_raw",1),p,"gamma_raw",2))));
                            }
                        }
                    } else {

                        current_statement_begin__ = 95;
                        for (int p = 1; p <= P; ++p) {

                            current_statement_begin__ = 96;
                            if (as_bool(logical_lte(p,S))) {

                                current_statement_begin__ = 97;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), ((get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2) * get_base1(delta_gamma,t,"delta_gamma",1)) + multiply(get_base1(get_base1(ZZ,t,"ZZ",1),p,"ZZ",2),get_base1(nu_geo,t,"nu_geo",1))));
                            }
                            current_statement_begin__ = 99;
                            if (as_bool(logical_gt(p,S))) {

                                current_statement_begin__ = 100;
                                stan::math::assign(get_base1_lhs(get_base1_lhs(mu_gamma,t,"mu_gamma",1),p,"mu_gamma",2), get_base1(get_base1(gamma,(t - 1),"gamma",1),p,"gamma",2));
                            }
                        }
                        current_statement_begin__ = 103;
                        stan::math::assign(get_base1_lhs(gamma,t,"gamma",1), add(get_base1(mu_gamma,t,"mu_gamma",1),multiply(sd_innov_gamma,get_base1(gamma_raw,t,"gamma_raw",1))));
                    }
                    current_statement_begin__ = 105;
                    stan::math::assign(get_base1_lhs(mu_theta_bar,t,"mu_theta_bar",1), add(add(get_base1(xi,t,"xi",1),multiply(XX,get_base1(gamma,t,"gamma",1))),multiply(get_base1(theta_bar,(t - 1),"theta_bar",1),get_base1(delta_tbar,t,"delta_tbar",1))));
                }
                current_statement_begin__ = 109;
                stan::math::assign(get_base1_lhs(theta_bar,t,"theta_bar",1), add(get_base1(mu_theta_bar,t,"mu_theta_bar",1),multiply(get_base1(sd_theta_bar,t,"sd_theta_bar",1),get_base1(theta_bar_raw,t,"theta_bar_raw",1))));
                current_statement_begin__ = 111;
                for (int q = 1; q <= Q; ++q) {

                    current_statement_begin__ = 113;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(z,t,"z",1),q,"z",2), get_base1(theta_bar,t,"theta_bar",1));
                    current_statement_begin__ = 114;
                    for (int g = 1; g <= G; ++g) {

                        current_statement_begin__ = 116;
                        stan::math::assign(get_base1_lhs(get_base1_lhs(get_base1_lhs(prob,t,"prob",1),q,"prob",2),g,"prob",3), Phi_approx(get_base1(get_base1(get_base1(z,t,"z",1),q,"z",2),g,"z",3)));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < T; ++k0__) {
            for (int k1__ = 0; k1__ < Q; ++k1__) {
                for (int k2__ = 0; k2__ < G; ++k2__) {
                    check_greater_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],0);
                    check_less_or_equal(function__,"prob[k0__][k1__][k2__]",prob[k0__][k1__][k2__],1);
                }
            }
        }

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(gamma[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < G; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_theta_bar[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < P; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(mu_gamma[k_0__][k_1__]);
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(z[k_0__][k_1__][k_2__]);
                }
            }
        }
        for (int k_2__ = 0; k_2__ < G; ++k_2__) {
            for (int k_1__ = 0; k_1__ < Q; ++k_1__) {
                for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                    vars__.push_back(prob[k_0__][k_1__][k_2__]);
                }
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_2017_01_04_singleissue";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_geo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_demo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= H; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "nu_geo" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= Hprior; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_geo_prior" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_tbar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar_raw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_theta_bar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_geo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_gamma_demo";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_innov_gamma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= G; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_theta_bar" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= P; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_gamma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_2__ = 1; k_2__ <= G; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= Q; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "prob" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }

}; // model

} // namespace




#endif
